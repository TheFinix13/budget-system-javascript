[{"C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\index.js":"1","C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\Router.js":"2","C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\contexts\\AuthContext.js":"3","C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\components\\ThemeWrapper\\ThemeWrapper.js":"4","C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\components\\BackgroundColorWrapper\\BackgroundColorWrapper.js":"5","C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\views\\auth\\VerifyAccount.js":"6","C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\views\\auth\\Auth.js":"7","C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\views\\auth\\ForgotPassword.js":"8","C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\views\\auth\\ResetPassword.js":"9","C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\data\\api.js":"10","C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\layouts\\Ministry\\Ministry.js":"11","C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\layouts\\Admin\\Admin.js":"12","C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\contexts\\ThemeContext.js":"13","C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\contexts\\BackgroundColorContext.js":"14","C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\views\\auth\\LoginForm.js":"15","C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\views\\auth\\RegisterForm.js":"16","C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\ministry_routes.js":"17","C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\routes.js":"18","C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\components\\Footer\\Footer.js":"19","C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\components\\Navbars\\AdminNavbar.js":"20","C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\components\\Sidebar\\Sidebar.js":"21","C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\components\\FixedPlugin\\FixedPlugin.js":"22","C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\views\\ministry\\Dashboard.js":"23","C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\views\\ministry\\Profile.js":"24","C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\views\\admin\\Profile.js":"25","C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\views\\admin\\Dashboard.js":"26","C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\views\\admin\\AddMinistry.js":"27","C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\views\\ministry\\Budget.js":"28","C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\views\\ministry\\Departments.js":"29","C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\views\\ministry\\Expenditure.js":"30","C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\views\\ministry\\AllUnits.js":"31","C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\views\\admin\\BudgetRequest.js":"32","C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\views\\ministry\\Report.js":"33","C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\views\\admin\\Ministry.js":"34","C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\views\\admin\\AllUnit.js":"35","C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\views\\admin\\AllDepartment.js":"36","C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\views\\admin\\Term.js":"37","C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\views\\ministry\\AddDepartment.js":"38","C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\views\\admin\\MinistryData.js":"39","C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\views\\ministry\\UnitData.js":"40","C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\views\\ministry\\DepartmentData.js":"41","C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\views\\admin\\AddTerm.js":"42","C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\views\\admin\\BudgetRequestData.js":"43","C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\views\\ministry\\AddUnit.js":"44","C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\views\\ministry\\ExpenditureData.js":"45","C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\components\\Notification\\Notification.js":"46","C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\views\\ministry\\AddBudget.js":"47","C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\views\\ministry\\BudgetData.js":"48","C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\views\\ministry\\Unit.js":"49","C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\views\\ministry\\UnitReport.js":"50"},{"size":818,"mtime":1670699277463,"results":"51","hashOfConfig":"52"},{"size":1675,"mtime":1671017739825,"results":"53","hashOfConfig":"52"},{"size":3340,"mtime":1673214057874,"results":"54","hashOfConfig":"52"},{"size":724,"mtime":1673214057874,"results":"55","hashOfConfig":"52"},{"size":516,"mtime":1667410095323,"results":"56","hashOfConfig":"52"},{"size":1420,"mtime":1667410095349,"results":"57","hashOfConfig":"52"},{"size":2479,"mtime":1673214057928,"results":"58","hashOfConfig":"52"},{"size":1657,"mtime":1667410095344,"results":"59","hashOfConfig":"52"},{"size":2401,"mtime":1667410095348,"results":"60","hashOfConfig":"52"},{"size":5083,"mtime":1673222323894,"results":"61","hashOfConfig":"52"},{"size":4478,"mtime":1671017739846,"results":"62","hashOfConfig":"52"},{"size":4454,"mtime":1667517120958,"results":"63","hashOfConfig":"52"},{"size":212,"mtime":1667410095327,"results":"64","hashOfConfig":"52"},{"size":266,"mtime":1667410095327,"results":"65","hashOfConfig":"52"},{"size":2555,"mtime":1673214057936,"results":"66","hashOfConfig":"52"},{"size":2869,"mtime":1667410095348,"results":"67","hashOfConfig":"52"},{"size":1729,"mtime":1673222323899,"results":"68","hashOfConfig":"52"},{"size":2188,"mtime":1673222323904,"results":"69","hashOfConfig":"52"},{"size":532,"mtime":1667410095326,"results":"70","hashOfConfig":"52"},{"size":4702,"mtime":1672868815139,"results":"71","hashOfConfig":"52"},{"size":4911,"mtime":1673222323890,"results":"72","hashOfConfig":"52"},{"size":2696,"mtime":1667410095325,"results":"73","hashOfConfig":"52"},{"size":11264,"mtime":1673438040021,"results":"74","hashOfConfig":"52"},{"size":6872,"mtime":1673438040055,"results":"75","hashOfConfig":"52"},{"size":5082,"mtime":1673214057924,"results":"76","hashOfConfig":"52"},{"size":10381,"mtime":1673438039997,"results":"77","hashOfConfig":"52"},{"size":9435,"mtime":1673190137352,"results":"78","hashOfConfig":"52"},{"size":19342,"mtime":1673438040006,"results":"79","hashOfConfig":"52"},{"size":11484,"mtime":1673438040034,"results":"80","hashOfConfig":"52"},{"size":10776,"mtime":1673438040040,"results":"81","hashOfConfig":"52"},{"size":9058,"mtime":1673222323924,"results":"82","hashOfConfig":"52"},{"size":8090,"mtime":1673222323909,"results":"83","hashOfConfig":"52"},{"size":16503,"mtime":1673190137530,"results":"84","hashOfConfig":"52"},{"size":11022,"mtime":1673214057904,"results":"85","hashOfConfig":"52"},{"size":7537,"mtime":1673190137369,"results":"86","hashOfConfig":"52"},{"size":7539,"mtime":1673213992844,"results":"87","hashOfConfig":"52"},{"size":8431,"mtime":1673190137389,"results":"88","hashOfConfig":"52"},{"size":5060,"mtime":1672782935918,"results":"89","hashOfConfig":"52"},{"size":11112,"mtime":1673214057914,"results":"90","hashOfConfig":"52"},{"size":22169,"mtime":1703442592036,"results":"91","hashOfConfig":"52"},{"size":13928,"mtime":1673438040027,"results":"92","hashOfConfig":"52"},{"size":3657,"mtime":1673190137358,"results":"93","hashOfConfig":"52"},{"size":4162,"mtime":1673438039990,"results":"94","hashOfConfig":"52"},{"size":6577,"mtime":1673222323919,"results":"95","hashOfConfig":"52"},{"size":7489,"mtime":1673438040047,"results":"96","hashOfConfig":"52"},{"size":905,"mtime":1667410095327,"results":"97","hashOfConfig":"52"},{"size":6266,"mtime":1672139748494,"results":"98","hashOfConfig":"52"},{"size":5537,"mtime":1673438040013,"results":"99","hashOfConfig":"52"},{"size":9025,"mtime":1673190137536,"results":"100","hashOfConfig":"52"},{"size":9528,"mtime":1673438040067,"results":"101","hashOfConfig":"52"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},"1ij634a",{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"104"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"104"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"104"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"104"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"104"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"104"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"104"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"104"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"104"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"192","messages":"193","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"104"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"104"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"104"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"104"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},"C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\index.js",[],["216","217"],"C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\Router.js",[],"C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\contexts\\AuthContext.js",[],"C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\components\\ThemeWrapper\\ThemeWrapper.js",[],"C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\components\\BackgroundColorWrapper\\BackgroundColorWrapper.js",[],"C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\views\\auth\\VerifyAccount.js",[],"C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\views\\auth\\Auth.js",[],"C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\views\\auth\\ForgotPassword.js",[],"C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\views\\auth\\ResetPassword.js",[],"C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\data\\api.js",[],"C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\layouts\\Ministry\\Ministry.js",[],"C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\layouts\\Admin\\Admin.js",[],"C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\contexts\\ThemeContext.js",[],"C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\contexts\\BackgroundColorContext.js",[],"C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\views\\auth\\LoginForm.js",["218","219"],"import { useState } from \"react\";\r\nimport Axios from \"axios\";\r\nimport { useHistory, Link } from \"react-router-dom\";\r\nimport logo from \"./img/logo.png\";\r\nimport { authenticate } from \"../../data/api\";\r\nimport { BiEnvelope, BiReset } from \"react-icons/bi\";\r\nimport { BsFillLockFill } from \"react-icons/bs\";\r\n\r\nfunction LoginForm({ getLoggedIn }) {\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [message, setMessage] = useState(\"\");\r\n  const history = useHistory();\r\n\r\n  async function loginFunc(e) {\r\n    setMessage(\"\");\r\n    e.preventDefault();\r\n    let nemail = email.toLowerCase().replace(/ /g, \"\");\r\n    const loginData = { email: nemail, password };\r\n\r\n    try {\r\n      const { data } = await Axios.post(authenticate.userAuth, loginData);\r\n      if (data.auth === true) {\r\n        window.localStorage.setItem(\"token\", data.token);\r\n        await getLoggedIn();\r\n        history.push(\"/admin/dashboard\");\r\n      } else {\r\n        setMessage(data.msg);\r\n      }\r\n    } catch (err) {\r\n      setMessage(err.response.data.msg + \"!\");\r\n    }\r\n  }\r\n  return (\r\n    <>\r\n      <form onSubmit={loginFunc} className=\"sign-in-form\">\r\n        <img\r\n          src={logo}\r\n          alt=\"State Logo\"\r\n          style={{ padding: \"10px\", maxHeight: \"250px\" }}\r\n        />\r\n        {/* <h3>BUDGET AND EXPENDITURE SYSTEM</h3> */}\r\n        <h4 style={{ color: \"red\", textAlign: \"center\" }}>{message}</h4>\r\n        <div className=\"input-field\">\r\n          <i>\r\n            <BiEnvelope className=\"iconInput\" />\r\n          </i>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Email: johndoe@gmail.com\"\r\n            onChange={(e) => setEmail(e.target.value)}\r\n          />\r\n        </div>\r\n        <div className=\"input-field\">\r\n          <i>\r\n            <BsFillLockFill className=\"iconInput\" />\r\n          </i>\r\n          <input\r\n            type=\"password\"\r\n            placeholder=\"Password\"\r\n            autoComplete=\"true\"\r\n            onChange={(e) => setPassword(e.target.value)}\r\n          />\r\n        </div>\r\n        <input type=\"submit\" value=\"Login\" className=\"btn-auth solid\" />\r\n        {/*<p className=\"social-text\" style={{ color: \"white\" }}>\r\n          Having Password issues?\r\n        </p>\r\n        <div className=\"social-media\">\r\n          <Link to=\"/forgotpassword\">\r\n            <i className=\"social-icon\">\r\n              <BiReset size={25} color=\"white\" />\r\n            </i>\r\n          </Link>\r\n        </div> */}\r\n      </form>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default LoginForm;\r\n","C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\views\\auth\\RegisterForm.js",[],"C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\ministry_routes.js",[],"C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\routes.js",[],"C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\components\\Footer\\Footer.js",[],"C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\components\\Navbars\\AdminNavbar.js",["220"],"import React from \"react\";\r\n// nodejs library that concatenates classes\r\nimport classNames from \"classnames\";\r\nimport { useAuth } from \"../../contexts/AuthContext\";\r\n// reactstrap components\r\nimport {\r\n  Collapse,\r\n  DropdownToggle,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  UncontrolledDropdown,\r\n  NavbarBrand,\r\n  Navbar,\r\n  NavLink,\r\n  Nav,\r\n  Container,\r\n  NavbarToggler,\r\n} from \"reactstrap\";\r\n\r\nfunction AdminNavbar(props) {\r\n  const [collapseOpen, setcollapseOpen] = React.useState(false);\r\n  const [color, setcolor] = React.useState(\"navbar-transparent\");\r\n  const { getLoggedIn, userDetail, activeTerm } = useAuth();\r\n\r\n  async function logout() {\r\n    try {\r\n      window.localStorage.removeItem(\"token\");\r\n      await getLoggedIn();\r\n    } catch (e) {\r\n      alert(e);\r\n    }\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    window.addEventListener(\"resize\", updateColor);\r\n    // Specify how to clean up after this effect:\r\n    return function cleanup() {\r\n      window.removeEventListener(\"resize\", updateColor);\r\n    };\r\n  });\r\n  // function that adds color white/transparent to the navbar on resize (this is for the collapse)\r\n  const updateColor = () => {\r\n    if (window.innerWidth < 993 && collapseOpen) {\r\n      setcolor(\"bg-white\");\r\n    } else {\r\n      setcolor(\"navbar-transparent\");\r\n    }\r\n  };\r\n  // this function opens and closes the collapse on small devices\r\n  const toggleCollapse = () => {\r\n    if (collapseOpen) {\r\n      setcolor(\"navbar-transparent\");\r\n    } else {\r\n      setcolor(\"bg-white\");\r\n    }\r\n    setcollapseOpen(!collapseOpen);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Navbar className={classNames(\"navbar-absolute\", color)} expand=\"lg\">\r\n        <Container fluid>\r\n          <div className=\"navbar-wrapper\">\r\n            <div\r\n              className={classNames(\"navbar-toggle d-inline\", {\r\n                toggled: props.sidebarOpened,\r\n              })}\r\n            >\r\n              <NavbarToggler onClick={props.toggleSidebar}>\r\n                <span className=\"navbar-toggler-bar bar1\" />\r\n                <span className=\"navbar-toggler-bar bar2\" />\r\n                <span className=\"navbar-toggler-bar bar3\" />\r\n              </NavbarToggler>\r\n            </div>\r\n            <NavbarBrand href=\"#pablo\" onClick={(e) => e.preventDefault()}>\r\n              {props.brandText}\r\n            </NavbarBrand>\r\n          </div>\r\n          <NavbarToggler onClick={toggleCollapse}>\r\n            <span className=\"navbar-toggler-bar navbar-kebab\" />\r\n            <span className=\"navbar-toggler-bar navbar-kebab\" />\r\n            <span className=\"navbar-toggler-bar navbar-kebab\" />\r\n          </NavbarToggler>\r\n          <Collapse navbar isOpen={collapseOpen}>\r\n            <Nav className=\"ml-auto\" navbar>\r\n              {userDetail ? (\r\n                <font\r\n                  className=\"primary\"\r\n                  style={{ fontSize: \"18px\", padding: \"7px\" }}\r\n                >\r\n                  {userDetail.firstname + \" \" + userDetail.lastname} <br />\r\n                  <font className=\"primary\" style={{ fontSize: \"14px\" }}>\r\n                    {userDetail?.Ministry?.name}\r\n                  </font>\r\n                </font>\r\n              ) : null}\r\n              <UncontrolledDropdown nav>\r\n                <DropdownToggle\r\n                  caret\r\n                  color=\"default\"\r\n                  nav\r\n                  onClick={(e) => e.preventDefault()}\r\n                >\r\n                  <div className=\"photo\">\r\n                    <img\r\n                      alt=\"...\"\r\n                      src={require(\"assets/img/anime3.png\").default}\r\n                    />\r\n                  </div>\r\n                  <b className=\"caret d-none d-lg-block d-xl-block\" />\r\n                  <p className=\"d-lg-none\">Menu Details</p>\r\n                </DropdownToggle>\r\n                <DropdownMenu className=\"dropdown-navbar\" right tag=\"ul\">\r\n                  <NavLink tag=\"li\">\r\n                    <DropdownItem className=\"nav-item\">Profile</DropdownItem>\r\n                  </NavLink>\r\n                  <NavLink tag=\"li\">\r\n                    <DropdownItem className=\"nav-item\">Settings</DropdownItem>\r\n                  </NavLink>\r\n                  <DropdownItem divider tag=\"li\" />\r\n                  <NavLink tag=\"li\">\r\n                    <DropdownItem onClick={() => logout()} className=\"nav-item\">\r\n                      Log out\r\n                    </DropdownItem>\r\n                  </NavLink>\r\n                </DropdownMenu>\r\n              </UncontrolledDropdown>\r\n              <li className=\"separator d-lg-none\" />\r\n            </Nav>\r\n          </Collapse>\r\n        </Container>\r\n      </Navbar>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default AdminNavbar;\r\n","C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\components\\Sidebar\\Sidebar.js",[],"C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\components\\FixedPlugin\\FixedPlugin.js",[],"C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\views\\ministry\\Dashboard.js",["221","222"],"import React, { useState, useEffect } from \"react\";\r\n\r\nimport { expenditure, department } from \"../../data/api\";\r\nimport axios from \"axios\";\r\nimport Notifications from \"components/Notification/Notification\";\r\nimport { IoIosAddCircleOutline } from \"react-icons/io\";\r\nimport { useAuth } from \"contexts/AuthContext\";\r\n// reactstrap components\r\nimport { Card, CardHeader, CardBody, CardTitle, Row, Col } from \"reactstrap\";\r\nimport { Bar, Doughnut, Line } from \"react-chartjs-2\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Dashboard() {\r\n  const [notificationStatus, setNotificationStatus] = useState(false);\r\n  const [notificationDetails, setNotificationDetails] = useState({\r\n    msg: \"\",\r\n    type: \"\",\r\n  });\r\n\r\n  const [totalUnits, setTotalUnits] = useState(0);\r\n  const [totalAccountedUnits, setTotalAccountedUnits] = useState(0);\r\n  const [totalDepartments, setTotalDepartments] = useState(0);\r\n  const [unitsCountByDepartment, setUnitsCountByDepartment] = useState({});\r\n  const [time, setTime] = useState(\"daily\");\r\n\r\n  const { userDetail, activeTerm } = useAuth();\r\n  const [graphDetails, setGraphDetails] = useState({});\r\n  const [graphPeriods, setGraphPeriods] = useState({});\r\n\r\n  const options = {\r\n    scales: {\r\n      yAxes: [\r\n        {\r\n          display: false,\r\n        },\r\n      ],\r\n      xAxes: [\r\n        {\r\n          display: false,\r\n        },\r\n      ],\r\n    },\r\n  };\r\n\r\n  useEffect(\r\n    () => {\r\n      async function fetchBudgetExpenditure() {\r\n        await axios\r\n          .get(\r\n            expenditure.showBudgetVsExpenditure +\r\n              \"/\" +\r\n              activeTerm.id +\r\n              \"/\" +\r\n              userDetail.ministryId\r\n          )\r\n          .then(async (response) => {\r\n            if (response.data.status === true) {\r\n              await axios\r\n                .get(\r\n                  expenditure.showDepartmentExpenses +\r\n                    \"/\" +\r\n                    activeTerm.id +\r\n                    \"/\" +\r\n                    userDetail.ministryId\r\n                )\r\n                .then((response1) => {\r\n                  if (response1.data.status === true) {\r\n                    setGraphDetails({\r\n                      bVSr: response.data.data,\r\n                      departmentExpenses: response1.data.data,\r\n                    });\r\n                    // setDataLoad(false);\r\n                  } else {\r\n                    setNotificationDetails({\r\n                      msg: \"Error Department Expenses, Please Referesh The Page\",\r\n                      type: \"danger\",\r\n                    });\r\n                    setNotificationStatus(true);\r\n                    // setDataLoad(false);\r\n                  }\r\n                });\r\n\r\n              // setDataLoad(false);\r\n            } else {\r\n              setNotificationDetails({\r\n                msg: \"Error Loading Expenditure VS Budget Please Referesh The Page\",\r\n                type: \"danger\",\r\n              });\r\n              setNotificationStatus(true);\r\n              // setDataLoad(false);\r\n            }\r\n          });\r\n      }\r\n\r\n      async function fetchBudgets() {\r\n        await axios\r\n          .get(\r\n            department.showBudgets +\r\n              \"/\" +\r\n              userDetail.ministryId +\r\n              \"/\" +\r\n              activeTerm.id\r\n          )\r\n          .then((response) => {\r\n            if (response.data.status === true) {\r\n              setTotalUnits(response.data.totalUnits);\r\n              setTotalDepartments(response.data.totalDepartments);\r\n              setTotalAccountedUnits(response.data.totalAccountedUnits);\r\n              setUnitsCountByDepartment(response.data.unitsCountByDepartment);\r\n              // setDataLoad(false);\r\n            } else {\r\n              setNotificationDetails({\r\n                msg: \"Error Loading Ministries, Please Referesh The Page\",\r\n                type: \"danger\",\r\n              });\r\n              setNotificationStatus(true);\r\n              // setDataLoad(false);\r\n            }\r\n          });\r\n      }\r\n\r\n      async function fetchDepartmentExpenses() {\r\n        await axios\r\n          .get(\r\n            expenditure.showDepartmentExpenses +\r\n              \"/\" +\r\n              activeTerm.id +\r\n              \"/\" +\r\n              userDetail.ministryId\r\n          )\r\n          .then((response) => {\r\n            if (response.data.status === true) {\r\n              setGraphDetails({\r\n                ...graphDetails,\r\n                departmentExpenses: response.data.data,\r\n              });\r\n              // setDataLoad(false);\r\n            } else {\r\n              setNotificationDetails({\r\n                msg: \"Error Department Expenses, Please Referesh The Page\",\r\n                type: \"danger\",\r\n              });\r\n              setNotificationStatus(true);\r\n              // setDataLoad(false);\r\n            }\r\n          });\r\n      }\r\n\r\n      fetchExpenseByPeriod(time);\r\n      fetchBudgetExpenditure();\r\n      fetchDepartmentExpenses();\r\n      fetchBudgets();\r\n    },\r\n    // eslint-disable-next-line\r\n    []\r\n  );\r\n\r\n  async function fetchExpenseByPeriod(time) {\r\n    await axios\r\n      .get(expenditure.showByTime + \"/\" + userDetail.ministryId + \"/\" + time)\r\n      .then((response1) => {\r\n        if (response1.data.status === true) {\r\n          setGraphPeriods(response1.data.data);\r\n          // setDataLoad(false);\r\n        } else {\r\n          setNotificationDetails({\r\n            msg: \"Error Loading Graph, Please Referesh The Page\",\r\n            type: \"danger\",\r\n          });\r\n          setNotificationStatus(true);\r\n          // setDataLoad(false);\r\n        }\r\n      });\r\n\r\n    // setDataLoad(false);\r\n  }\r\n\r\n  function arrangeData(gd) {\r\n    const labels = Object.keys(gd || {});\r\n    const data = Object.values(gd || {});\r\n\r\n    return {\r\n      labels: labels,\r\n      datasets: [\r\n        {\r\n          id: 1,\r\n          label: \"Data\",\r\n          data: data,\r\n          backgroundColor: [\r\n            \"rgba(255, 206, 86)\",\r\n            \"rgba(75, 192, 192)\",\r\n            \"rgba(153, 102, 255)\",\r\n            \"rgba(255, 159, 64)\",\r\n            \"rgba(255, 99, 132)\",\r\n            \"rgba(54, 162, 235)\",\r\n          ],\r\n          borderColor: [\r\n            \"rgba(255, 206, 86, 1)\",\r\n            \"rgba(75, 192, 192, 1)\",\r\n            \"rgba(153, 102, 255, 1)\",\r\n            \"rgba(255, 159, 64, 1)\",\r\n            \"rgba(255, 99, 132, 1)\",\r\n            \"rgba(54, 162, 235, 1)\",\r\n          ],\r\n        },\r\n      ],\r\n    };\r\n  }\r\n  return (\r\n    <>\r\n      {notificationStatus === true ? (\r\n        <Notifications details={notificationDetails} />\r\n      ) : null}\r\n      <div className=\"content\">\r\n        <Row>\r\n          <Col>\r\n            <Link to=\"alldepartment\">\r\n              <Card className=\"grow\">\r\n                <CardBody>\r\n                  <Row>\r\n                    <Col>\r\n                      <CardHeader>\r\n                        <CardTitle tag=\"h4\">Departments</CardTitle>\r\n                        <CardTitle tag=\"h5\">\r\n                          Total: {totalDepartments}\r\n                        </CardTitle>\r\n                      </CardHeader>\r\n                    </Col>\r\n                    <Col\r\n                      style={{\r\n                        textAlign: \"center\",\r\n                        display: \"flex\",\r\n                        justifyContent: \"center\",\r\n                        alignItems: \"center\",\r\n                      }}\r\n                    >\r\n                      <IoIosAddCircleOutline size={50} />\r\n                    </Col>\r\n                  </Row>\r\n                </CardBody>\r\n              </Card>\r\n            </Link>\r\n          </Col>\r\n          <Col>\r\n            <Link to=\"allunit\">\r\n              <Card className=\"grow\">\r\n                <CardBody>\r\n                  <Row>\r\n                    <Col>\r\n                      <CardHeader>\r\n                        <CardTitle tag=\"h4\">Units</CardTitle>\r\n                        <CardTitle tag=\"h5\">Total: {totalUnits}</CardTitle>\r\n                      </CardHeader>\r\n                    </Col>\r\n                    <Col\r\n                      style={{\r\n                        textAlign: \"center\",\r\n                        display: \"flex\",\r\n                        justifyContent: \"center\",\r\n                        alignItems: \"center\",\r\n                      }}\r\n                    >\r\n                      <IoIosAddCircleOutline size={50} />\r\n                    </Col>\r\n                  </Row>\r\n                </CardBody>\r\n              </Card>\r\n            </Link>\r\n          </Col>\r\n          <Col>\r\n            <Card className=\"grow\" href=\"/admin/ministry\">\r\n              <CardBody>\r\n                <Row>\r\n                  <Col>\r\n                    <CardHeader>\r\n                      <CardTitle tag=\"h4\"> Active Term</CardTitle>\r\n                      <CardTitle tag=\"h5\">{activeTerm?.name}</CardTitle>\r\n                    </CardHeader>\r\n                  </Col>\r\n                  <Col\r\n                    style={{\r\n                      textAlign: \"center\",\r\n                      display: \"flex\",\r\n                      justifyContent: \"center\",\r\n                      alignItems: \"center\",\r\n                    }}\r\n                  >\r\n                    <IoIosAddCircleOutline size={50} />\r\n                  </Col>\r\n                </Row>\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row>\r\n          <Col>\r\n            <Card>\r\n              <CardHeader>Budget : Expenditure Statistics</CardHeader>\r\n              <CardBody>\r\n                <Row>\r\n                  <Doughnut\r\n                    datasetIdKey=\"id\"\r\n                    data={{\r\n                      ...arrangeData(graphDetails?.bVSr || {}),\r\n                    }}\r\n                  />\r\n                </Row>\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n          <Col>\r\n            <Card>\r\n              <CardHeader>Department : Expenditure Distribution</CardHeader>\r\n              <CardBody>\r\n                <Row>\r\n                  <Doughnut\r\n                    data={{\r\n                      ...arrangeData(graphDetails.departmentExpenses),\r\n                    }}\r\n                  />\r\n                </Row>\r\n              </CardBody>\r\n            </Card>\r\n          </Col>{\" \"}\r\n          <Col>\r\n            <Card>\r\n              <CardHeader>Department : Unit Distribution</CardHeader>\r\n              <CardBody>\r\n                <Row>\r\n                  <Bar\r\n                    data={{\r\n                      ...arrangeData(unitsCountByDepartment),\r\n                    }}\r\n                    options={options}\r\n                  />\r\n                </Row>\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n          <Col>\r\n            <Card>\r\n              <CardHeader>\r\n                Expenditure Chart : {time.toLocaleUpperCase()}\r\n              </CardHeader>\r\n              <CardBody>\r\n                <Row>\r\n                  <Line\r\n                    data={{\r\n                      ...arrangeData(graphPeriods),\r\n                    }}\r\n                  />\r\n                </Row>\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Dashboard;\r\n","C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\views\\ministry\\Profile.js",[],"C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\views\\admin\\Profile.js",[],"C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\views\\admin\\Dashboard.js",["223","224"],"import React, { useState, useEffect } from \"react\";\r\n\r\nimport { expenditure, department, ministry } from \"../../data/api\";\r\nimport axios from \"axios\";\r\nimport Notifications from \"components/Notification/Notification\";\r\nimport { IoIosAddCircleOutline } from \"react-icons/io\";\r\nimport { useAuth } from \"contexts/AuthContext\";\r\n// reactstrap components\r\nimport { Card, CardHeader, CardBody, CardTitle, Row, Col } from \"reactstrap\";\r\nimport { Bar, Doughnut, Line } from \"react-chartjs-2\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Dashboard() {\r\n  const [notificationStatus, setNotificationStatus] = useState(false);\r\n  const [notificationDetails, setNotificationDetails] = useState({\r\n    msg: \"\",\r\n    type: \"\",\r\n  });\r\n\r\n  const [counts, setCounts] = useState({});\r\n  const [departmentCount, setDepartmentCount] = useState(0);\r\n  const [time, setTime] = useState(\"daily\");\r\n\r\n  const { userDetail, activeTerm } = useAuth();\r\n  const [graphDetails, setGraphDetails] = useState({});\r\n  const [graphPeriods, setGraphPeriods] = useState({});\r\n\r\n  const options = {\r\n    scales: {\r\n      yAxes: [\r\n        {\r\n          display: false,\r\n        },\r\n      ],\r\n      xAxes: [\r\n        {\r\n          display: false,\r\n        },\r\n      ],\r\n    },\r\n  };\r\n\r\n  useEffect(\r\n    () => {\r\n      async function fetchBudgetExpenditure() {\r\n        await axios\r\n          .get(\r\n            expenditure.showBudgetVsExpenditure +\r\n              \"/\" +\r\n              activeTerm.id +\r\n              \"/\" +\r\n              userDetail.ministryId\r\n          )\r\n          .then(async (response) => {\r\n            if (response.data.status === true) {\r\n              await axios\r\n                .get(expenditure.showMinistryExpenses + \"/\" + activeTerm.id)\r\n                .then((response1) => {\r\n                  if (response1.data.status === true) {\r\n                    setGraphDetails({\r\n                      ...graphDetails,\r\n                      bVSr: response.data.data,\r\n                      departmentExpenses: response1.data.data,\r\n                    });\r\n                    // setDataLoad(false);\r\n                  } else {\r\n                    setNotificationDetails({\r\n                      msg: \"Error Department Expenses, Please Referesh The Page\",\r\n                      type: \"danger\",\r\n                    });\r\n                    setNotificationStatus(true);\r\n                    // setDataLoad(false);\r\n                  }\r\n                });\r\n\r\n              // setDataLoad(false);\r\n            } else {\r\n              setNotificationDetails({\r\n                msg: \"Error Loading Expenditure VS Budget Please Referesh The Page\",\r\n                type: \"danger\",\r\n              });\r\n              setNotificationStatus(true);\r\n              // setDataLoad(false);\r\n            }\r\n          });\r\n      }\r\n\r\n      async function fetchDepartmentCount() {\r\n        await axios.get(ministry.showDepartmentCount).then((response) => {\r\n          if (response.data.status === true) {\r\n            setDepartmentCount(response.data.data);\r\n            // setDataLoad(false);\r\n          } else {\r\n            setNotificationDetails({\r\n              msg: \"Error Loading Ministries, Please Referesh The Page\",\r\n              type: \"danger\",\r\n            });\r\n            setNotificationStatus(true);\r\n            // setDataLoad(false);\r\n          }\r\n        });\r\n      }\r\n      async function fetchCounts() {\r\n        await axios.get(ministry.ministryDepartmentCount).then((response) => {\r\n          if (response.data.status === true) {\r\n            setCounts(response.data.data);\r\n            // setDataLoad(false);\r\n          } else {\r\n            setNotificationDetails({\r\n              msg: \"Error Loading Counts, Please Referesh The Page\",\r\n              type: \"danger\",\r\n            });\r\n            setNotificationStatus(true);\r\n            // setDataLoad(false);\r\n          }\r\n        });\r\n      }\r\n\r\n      fetchExpenseByPeriod(time);\r\n      fetchBudgetExpenditure();\r\n      fetchDepartmentCount();\r\n      fetchCounts();\r\n    },\r\n    // eslint-disable-next-line\r\n    []\r\n  );\r\n\r\n  async function fetchExpenseByPeriod(time) {\r\n    await axios\r\n      .get(expenditure.showByTime + \"/\" + userDetail.ministryId + \"/\" + time)\r\n      .then((response1) => {\r\n        if (response1.data.status === true) {\r\n          setGraphPeriods(response1.data.data);\r\n          // setDataLoad(false);\r\n        } else {\r\n          setNotificationDetails({\r\n            msg: \"Error Loading Graph, Please Referesh The Page\",\r\n            type: \"danger\",\r\n          });\r\n          setNotificationStatus(true);\r\n          // setDataLoad(false);\r\n        }\r\n      });\r\n\r\n    // setDataLoad(false);\r\n  }\r\n\r\n  function arrangeData(gd) {\r\n    const labels = Object.keys(gd || {});\r\n    const data = Object.values(gd || {});\r\n\r\n    return {\r\n      labels: labels,\r\n      datasets: [\r\n        {\r\n          id: 1,\r\n          label: \"Data\",\r\n          data: data,\r\n          backgroundColor: [\r\n            \"rgba(255, 206, 86)\",\r\n            \"rgba(75, 192, 192)\",\r\n            \"rgba(153, 102, 255)\",\r\n            \"rgba(255, 159, 64)\",\r\n            \"rgba(255, 99, 132)\",\r\n            \"rgba(54, 162, 235)\",\r\n          ],\r\n          borderColor: [\r\n            \"rgba(255, 206, 86, 1)\",\r\n            \"rgba(75, 192, 192, 1)\",\r\n            \"rgba(153, 102, 255, 1)\",\r\n            \"rgba(255, 159, 64, 1)\",\r\n            \"rgba(255, 99, 132, 1)\",\r\n            \"rgba(54, 162, 235, 1)\",\r\n          ],\r\n        },\r\n      ],\r\n    };\r\n  }\r\n  return (\r\n    <>\r\n      {notificationStatus === true ? (\r\n        <Notifications details={notificationDetails} />\r\n      ) : null}\r\n      <div className=\"content\">\r\n        <Row>\r\n          <Col>\r\n            <Link to=\"ministry\">\r\n              <Card className=\"grow\">\r\n                <CardBody>\r\n                  <Row>\r\n                    <Col>\r\n                      <CardHeader>\r\n                        <CardTitle tag=\"h4\">Ministries</CardTitle>\r\n                        <CardTitle tag=\"h5\">\r\n                          Total: {counts?.ministryCount || 0}\r\n                        </CardTitle>\r\n                      </CardHeader>\r\n                    </Col>\r\n                    <Col\r\n                      style={{\r\n                        textAlign: \"center\",\r\n                        display: \"flex\",\r\n                        justifyContent: \"center\",\r\n                        alignItems: \"center\",\r\n                      }}\r\n                    >\r\n                      <IoIosAddCircleOutline size={50} />\r\n                    </Col>\r\n                  </Row>\r\n                </CardBody>\r\n              </Card>\r\n            </Link>\r\n          </Col>\r\n          <Col>\r\n            <Link to=\"alldepartment\">\r\n              <Card className=\"grow\">\r\n                <CardBody>\r\n                  <Row>\r\n                    <Col>\r\n                      <CardHeader>\r\n                        <CardTitle tag=\"h4\">Departments</CardTitle>\r\n                        <CardTitle tag=\"h5\">\r\n                          Total: {counts?.departmentCount || 0}\r\n                        </CardTitle>\r\n                      </CardHeader>\r\n                    </Col>\r\n                    <Col\r\n                      style={{\r\n                        textAlign: \"center\",\r\n                        display: \"flex\",\r\n                        justifyContent: \"center\",\r\n                        alignItems: \"center\",\r\n                      }}\r\n                    >\r\n                      <IoIosAddCircleOutline size={50} />\r\n                    </Col>\r\n                  </Row>\r\n                </CardBody>\r\n              </Card>\r\n            </Link>\r\n          </Col>\r\n          <Col>\r\n            <Card className=\"grow\" href=\"/admin/ministry\">\r\n              <CardBody>\r\n                <Row>\r\n                  <Col>\r\n                    <CardHeader>\r\n                      <CardTitle tag=\"h4\"> Active Term</CardTitle>\r\n                      <CardTitle tag=\"h5\">{activeTerm?.name}</CardTitle>\r\n                    </CardHeader>\r\n                  </Col>\r\n                  <Col\r\n                    style={{\r\n                      textAlign: \"center\",\r\n                      display: \"flex\",\r\n                      justifyContent: \"center\",\r\n                      alignItems: \"center\",\r\n                    }}\r\n                  >\r\n                    <IoIosAddCircleOutline size={50} />\r\n                  </Col>\r\n                </Row>\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row>\r\n          <Col>\r\n            <Card>\r\n              <CardHeader>Budget : Expenditure Statistics</CardHeader>\r\n              <CardBody>\r\n                <Row>\r\n                  <Doughnut\r\n                    datasetIdKey=\"id\"\r\n                    data={{\r\n                      ...arrangeData(graphDetails?.bVSr || {}),\r\n                    }}\r\n                  />\r\n                </Row>\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n          <Col>\r\n            <Card>\r\n              <CardHeader>Ministries : Expenditure Distribution</CardHeader>\r\n              <CardBody>\r\n                <Row>\r\n                  <Doughnut\r\n                    data={{\r\n                      ...arrangeData(graphDetails.departmentExpenses),\r\n                    }}\r\n                  />\r\n                </Row>\r\n              </CardBody>\r\n            </Card>\r\n          </Col>{\" \"}\r\n          <Col>\r\n            <Card>\r\n              <CardHeader>Ministries : Department Count</CardHeader>\r\n              <CardBody>\r\n                <Row>\r\n                  <Bar\r\n                    data={{\r\n                      ...arrangeData(departmentCount),\r\n                    }}\r\n                    options={options}\r\n                  />\r\n                </Row>\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n          <Col>\r\n            <Card>\r\n              <CardHeader>\r\n                Expenditure Chart : {time.toLocaleUpperCase()}\r\n              </CardHeader>\r\n              <CardBody>\r\n                <Row>\r\n                  <Line\r\n                    data={{\r\n                      ...arrangeData(graphPeriods),\r\n                    }}\r\n                  />\r\n                </Row>\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Dashboard;\r\n","C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\views\\admin\\AddMinistry.js",[],"C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\views\\ministry\\Budget.js",["225"],"import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { budget_request, department } from \"data/api\";\r\n\r\nimport Notifications from \"components/Notification/Notification\";\r\nimport { FiArrowLeft } from \"react-icons/fi\";\r\nimport { IoMdAddCircle } from \"react-icons/io\";\r\nimport empty from \"../../assets/img/product.svg\";\r\nimport { Link } from \"react-router-dom\";\r\nimport BudgetData from \"./BudgetData\";\r\nimport AddBudget from \"./AddBudget\";\r\nimport { useAuth } from \"contexts/AuthContext\";\r\n\r\n// import DepartmentData from \"./DepartmentData\";\r\nimport {\r\n  Card,\r\n  CardHeader,\r\n  CardBody,\r\n  CardTitle,\r\n  Table,\r\n  Row,\r\n  Col,\r\n  Button,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  Input,\r\n} from \"reactstrap\";\r\n\r\nfunction Budget({ department_id, ministry_id }) {\r\n  const [budgets, setBudgets] = useState([]);\r\n  const [currentBudget, setCurrentBudget] = useState({});\r\n\r\n  const { userDetail, setUserDetail, activeTerm } = useAuth();\r\n  const [totalUnits, setTotalUnits] = useState(0);\r\n  const [totalAccountedUnits, setTotalAccountedUnits] = useState(0);\r\n  const [unitsCountByDepartment, setUnitsCountByDepartment] = useState({});\r\n\r\n  const [notificationStatus, setNotificationStatus] = useState(false);\r\n  const [notificationDetails, setNotificationDetails] = useState({\r\n    msg: \"\",\r\n    type: \"\",\r\n  });\r\n\r\n  const ministryId = ministry_id || userDetail.ministryId;\r\n\r\n  const [modal, setModal] = useState(false);\r\n  const toggle = () => setModal(!modal);\r\n\r\n  const [dataload, setDataLoad] = useState(true);\r\n  const [viewMode, setViewMode] = useState(\"all\");\r\n  const [isAdd, setIsAdd] = useState(false);\r\n\r\n  function calculateTotalAmount(data) {\r\n    let total = 0;\r\n\r\n    total += Object.values(data).reduce((sum, amount) => sum + amount, 0);\r\n\r\n    return total;\r\n  }\r\n\r\n  function calculateTotalAmountByDepartment(data) {\r\n    const totalsByDepartment = {};\r\n\r\n    Object.entries(data).forEach(([department, budgets]) => {\r\n      totalsByDepartment[department] = budgets.reduce(\r\n        (total, budget) => total + budget.amount,\r\n        0\r\n      );\r\n    });\r\n\r\n    return totalsByDepartment;\r\n  }\r\n\r\n  useEffect(\r\n    () => {\r\n      async function fetchBudgets() {\r\n        await axios\r\n          .get(department.showBudgets + \"/\" + ministryId + \"/\" + activeTerm.id)\r\n          .then((response) => {\r\n            if (response.data.status === true) {\r\n              setBudgets(response.data.data);\r\n              setTotalUnits(response.data.totalUnits);\r\n              setTotalAccountedUnits(response.data.totalAccountedUnits);\r\n              setUnitsCountByDepartment(response.data.unitsCountByDepartment);\r\n              setDataLoad(false);\r\n            } else {\r\n              setNotificationDetails({\r\n                msg: \"Error Loading Ministries, Please Referesh The Page\",\r\n                type: \"danger\",\r\n              });\r\n              setNotificationStatus(true);\r\n              setDataLoad(false);\r\n            }\r\n          });\r\n      }\r\n      fetchBudgets();\r\n\r\n      if (activeTerm.budget_request) {\r\n        if (activeTerm.budget_request.status !== \"ACTIVE\") {\r\n          setNotificationDetails({\r\n            msg:\r\n              \"Budget Request Rejected: \" +\r\n              activeTerm.budget_request.description,\r\n            type: \"danger\",\r\n          });\r\n          setNotificationStatus(true);\r\n        }\r\n      }\r\n    },\r\n    // eslint-disable-next-line\r\n    []\r\n  );\r\n\r\n  async function addBudgetRequest(e) {\r\n    // setRequestLoading(true);\r\n    e.preventDefault();\r\n    await axios\r\n      .post(budget_request.addBudgetRequest, {\r\n        termId: activeTerm.id,\r\n        ministryId: ministryId,\r\n      })\r\n      .then((response) => {\r\n        if (response.data.status) {\r\n          setNotificationDetails({\r\n            msg: response.data.msg,\r\n            type: \"success\",\r\n          });\r\n          setUserDetail({ ...userDetail, budget_request: response.data.data });\r\n        } else {\r\n          setNotificationDetails({\r\n            msg: response.data.msg,\r\n            type: \"success\",\r\n          });\r\n        }\r\n        setNotificationStatus(true);\r\n      })\r\n      .catch((error) => {\r\n        if (error.response) {\r\n          setNotificationDetails({\r\n            msg: error.response.data.msg,\r\n            type: \"danger\",\r\n          });\r\n          setNotificationStatus(true);\r\n        } else {\r\n          console.log(error);\r\n          setNotificationDetails({ msg: \"Network Error!\", type: \"danger\" });\r\n          setNotificationStatus(true);\r\n        }\r\n      });\r\n    // setRequestLoading(false);\r\n  }\r\n\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const [q, setQ] = useState(\"\");\r\n\r\n  return (\r\n    <>\r\n      {notificationStatus ? (\r\n        <Notifications details={notificationDetails} />\r\n      ) : null}\r\n      <div className=\"content\">\r\n        <Row>\r\n          {viewMode === \"all\" ? (\r\n            <Col>\r\n              {loading === true ? (\r\n                <>\r\n                  {isAdd ? (\r\n                    <AddBudget\r\n                      department_id={department_id}\r\n                      setIsAdd={setIsAdd}\r\n                    />\r\n                  ) : (\r\n                    <>\r\n                      <Card>\r\n                        <CardHeader>\r\n                          <CardTitle className=\"pull-left\" tag=\"h4\">\r\n                            Budgets\r\n                          </CardTitle>\r\n                          <div\r\n                            className=\"pull-right\"\r\n                            style={{ marginBottom: \"20px\" }}\r\n                          >\r\n                            <Row>\r\n                              <Link\r\n                                style={{\r\n                                  paddingRight: \"10px\",\r\n                                }}\r\n                              >\r\n                                <Input\r\n                                  placeholder=\"Search based on budget name\"\r\n                                  type=\"text\"\r\n                                  value={q}\r\n                                  style={{ width: \"100%\" }}\r\n                                  onChange={(e) => setQ(e.target.value)}\r\n                                />\r\n                              </Link>\r\n                              {activeTerm.budget_request ? (\r\n                                <>\r\n                                  {activeTerm.budget_request.status !==\r\n                                  \"ACTIVE\" ? (\r\n                                    <Link style={{ marginRight: \"15px\" }}>\r\n                                      <Button\r\n                                        className=\"btn-fill\"\r\n                                        size=\"sm\"\r\n                                        style={{ width: \"100%\" }}\r\n                                        color=\"primary\"\r\n                                        type=\"submit\"\r\n                                        onClick={() => {\r\n                                          toggle();\r\n                                        }}\r\n                                      >\r\n                                        <IoMdAddCircle size={20} /> Process\r\n                                        Budget\r\n                                      </Button>\r\n                                    </Link>\r\n                                  ) : null}\r\n                                </>\r\n                              ) : null}\r\n                            </Row>\r\n                          </div>\r\n                        </CardHeader>{\" \"}\r\n                      </Card>\r\n                      <Row style={{ marginTop: \"-15px\" }}>\r\n                        <Col>\r\n                          <Card className=\"grow\">\r\n                            <CardBody>\r\n                              <Row>\r\n                                <Col>\r\n                                  <CardTitle tag=\"h4\">\r\n                                    Units in Mininstry\r\n                                  </CardTitle>\r\n                                  <CardTitle tag=\"h5\">\r\n                                    Total: {totalUnits}\r\n                                  </CardTitle>\r\n                                </Col>\r\n                              </Row>\r\n                            </CardBody>\r\n                          </Card>\r\n                        </Col>\r\n                        <Col>\r\n                          <Card className=\"grow\">\r\n                            <CardBody>\r\n                              <Row>\r\n                                <Col>\r\n                                  <CardTitle tag=\"h4\">\r\n                                    Units Accounted For\r\n                                  </CardTitle>\r\n                                  <CardTitle tag=\"h5\">\r\n                                    Total: {totalAccountedUnits}\r\n                                  </CardTitle>\r\n                                </Col>\r\n                              </Row>\r\n                            </CardBody>\r\n                          </Card>\r\n                        </Col>\r\n                        <Col>\r\n                          <Card className=\"grow\">\r\n                            <CardBody>\r\n                              <Row>\r\n                                <Col>\r\n                                  <CardTitle tag=\"h4\">Total Amount </CardTitle>\r\n                                  <CardTitle tag=\"h5\">\r\n                                    Total:{\" \"}\r\n                                    {calculateTotalAmount(\r\n                                      calculateTotalAmountByDepartment(budgets)\r\n                                    ).toLocaleString()}\r\n                                  </CardTitle>\r\n                                </Col>\r\n                              </Row>\r\n                            </CardBody>\r\n                          </Card>\r\n                        </Col>\r\n\r\n                        {/* <Col>\r\n                          <Card className=\"grow\">\r\n                            <CardBody>\r\n                              <Row>\r\n                                <Doughnut\r\n                                  style={{}}\r\n                                  data={{\r\n                                    labels: [\"Budgeted\", \"UnBudgeted\"],\r\n                                    datasets: [\r\n                                      {\r\n                                        id: 1,\r\n                                        label: \"\",\r\n                                        data: [5, 6],\r\n                                      },\r\n                                    ],\r\n                                  }}\r\n                                />\r\n                              </Row>\r\n                            </CardBody>\r\n                          </Card>\r\n                        </Col> */}\r\n                      </Row>\r\n                      {dataload === false ? (\r\n                        <>\r\n                          {Object.keys(budgets).length > 0 ? (\r\n                            <>\r\n                              <Card>\r\n                                <hr\r\n                                  style={{\r\n                                    backgroundColor: \"#aaa\",\r\n                                    marginRight: \"2%\",\r\n                                    marginLeft: \"2%\",\r\n                                    marginTop: \"-15px\",\r\n                                  }}\r\n                                />\r\n\r\n                                <CardBody>\r\n                                  <Table\r\n                                    className=\"tablesorter\"\r\n                                    responsive\r\n                                    style={{ overflow: \"unset\" }}\r\n                                  >\r\n                                    <thead className=\"text-primary\">\r\n                                      <tr>\r\n                                        <th>SN</th>\r\n                                        <th>Department Name</th>\r\n                                        <th>Total Amount</th>\r\n                                        <th>Budgeted : Total Units</th>\r\n                                        <th>Actions</th>\r\n                                      </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                      {Object.keys(budgets).map((row, key) => {\r\n                                        let allDepartments =\r\n                                          calculateTotalAmountByDepartment(\r\n                                            budgets\r\n                                          );\r\n                                        return (\r\n                                          <>\r\n                                            <tr key={key}>\r\n                                              <td>{key + 1} </td>\r\n                                              <td>\r\n                                                <b>{row}</b>\r\n                                                <br />\r\n                                                {budgets[row].map((item, k) => {\r\n                                                  return (\r\n                                                    <Row>\r\n                                                      <Col>\r\n                                                        Unit: {item.Unit.name}\r\n                                                      </Col>\r\n                                                      <Col>\r\n                                                        Amount:{\" \"}\r\n                                                        {item.amount.toLocaleString()}\r\n                                                      </Col>\r\n                                                    </Row>\r\n                                                  );\r\n                                                })}\r\n                                              </td>\r\n                                              <td>\r\n                                                {allDepartments[\r\n                                                  row\r\n                                                ].toLocaleString()}\r\n                                              </td>\r\n                                              <td>\r\n                                                {budgets[row].length}:\r\n                                                {unitsCountByDepartment[row]}{\" \"}\r\n                                              </td>\r\n                                              <td>\r\n                                                <div>\r\n                                                  <Button\r\n                                                    onClick={() => {\r\n                                                      setCurrentBudget(\r\n                                                        budgets[row]\r\n                                                      );\r\n                                                      setViewMode(\"current\");\r\n                                                      // setHideDepartment(true);\r\n                                                    }}\r\n                                                    className=\"btn-fill\"\r\n                                                    style={{\r\n                                                      marginBottom: \"5px\",\r\n                                                    }}\r\n                                                    color=\"primary\"\r\n                                                    size=\"sm\"\r\n                                                  >\r\n                                                    Show\r\n                                                  </Button>\r\n                                                </div>\r\n                                              </td>\r\n                                            </tr>\r\n                                          </>\r\n                                        );\r\n                                      })}\r\n                                    </tbody>\r\n                                  </Table>\r\n                                </CardBody>\r\n                              </Card>\r\n                            </>\r\n                          ) : (\r\n                            <Card>\r\n                              <div\r\n                                style={{\r\n                                  color: \"#39B54A\",\r\n                                  textAlign: \"center\",\r\n                                  padding: \"20px\",\r\n                                }}\r\n                              >\r\n                                <img\r\n                                  src={empty}\r\n                                  style={{ marginBottom: \"30px\" }}\r\n                                  height=\"250px\"\r\n                                  alt=\"Nothing to show yet\"\r\n                                />\r\n                                <br />\r\n                                <CardTitle tag=\"h4\">\r\n                                  Nothing To Show Yet... Add Some Units\r\n                                </CardTitle>\r\n                              </div>\r\n                            </Card>\r\n                          )}\r\n                        </>\r\n                      ) : (\r\n                        \"Loading...\"\r\n                      )}\r\n                    </>\r\n                  )}\r\n                </>\r\n              ) : (\r\n                <Button\r\n                  style={{ width: \"100%\", marginBottom: \"15px\" }}\r\n                  onClick={() => setLoading(!loading)}\r\n                  className=\"btn-fill\"\r\n                  color=\"primary\"\r\n                >\r\n                  <FiArrowLeft size={20} />{\" \"}\r\n                  <font style={{ paddingLeft: \"30px\" }}>Back To Budgets </font>\r\n                </Button>\r\n              )}\r\n            </Col>\r\n          ) : null}\r\n\r\n          {viewMode === \"current\" ? (\r\n            <BudgetData\r\n              currentBudget={currentBudget}\r\n              setViewMode={setViewMode}\r\n            />\r\n          ) : null}\r\n        </Row>\r\n      </div>\r\n\r\n      <Modal\r\n        isOpen={modal}\r\n        toggle={toggle}\r\n        backdropClassName=\"modal-backdrop-dark\"\r\n        backdrop={true}\r\n      >\r\n        <ModalHeader toggle={toggle}>Process Budget</ModalHeader>\r\n        <ModalBody style={{ textAlign: \"center\" }}>\r\n          Total Amount:{\" \"}\r\n          {calculateTotalAmount(\r\n            calculateTotalAmountByDepartment(budgets)\r\n          ).toLocaleString()}\r\n          <br />\r\n          Units In Mininstry: {totalUnits} <br />\r\n          <>\r\n            Units Accounted For: {totalAccountedUnits} <br />\r\n          </>\r\n          {totalUnits - totalAccountedUnits != 0 ? (\r\n            <>\r\n              There are <b>{totalUnits - totalAccountedUnits}</b>, Unaccounted\r\n              Units, are You Sure, You Want to Continue. {totalUnits} <br />\r\n            </>\r\n          ) : (\r\n            <>All Units Have Been Acounted For, Please Proceed.</>\r\n          )}\r\n          <Button\r\n            className=\"btn-fill\"\r\n            color=\"primary\"\r\n            type=\"submit\"\r\n            onClick={(e) => addBudgetRequest(e)}\r\n          >\r\n            Process Budget\r\n          </Button>\r\n        </ModalBody>\r\n        {/* <ModalFooter> */}\r\n\r\n        {/* </ModalFooter> */}\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Budget;\r\n","C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\views\\ministry\\Departments.js",["226"],"import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { department } from \"../../data/api\";\r\n\r\nimport Notifications from \"components/Notification/Notification\";\r\nimport { FiArrowLeft } from \"react-icons/fi\";\r\n\r\nimport empty from \"../../assets/img/product.svg\";\r\nimport { IoMdAddCircle } from \"react-icons/io\";\r\nimport { Link } from \"react-router-dom\";\r\nimport DepartmentData from \"./DepartmentData\";\r\n\r\nimport {\r\n  Card,\r\n  CardHeader,\r\n  CardBody,\r\n  CardTitle,\r\n  Table,\r\n  Row,\r\n  Col,\r\n  Button,\r\n  Input,\r\n} from \"reactstrap\";\r\nimport { useAuth } from \"contexts/AuthContext\";\r\nimport { Bar } from \"react-chartjs-2\";\r\nimport AddDepartment from \"./AddDepartment\";\r\n\r\nfunction AllDepartment({ ministry_id }) {\r\n  const [show_AllDepartment, setShow_AllDepartment] = useState([]);\r\n  const [currentDepartment, setCurrentDepartment] = useState({});\r\n  const { userDetail, activeTerm } = useAuth();\r\n  // const [totalUnits, setTotalUnits] = useState(0);\r\n  // const [totalAccountedUnits, setTotalAccountedUnits] = useState(0);\r\n  const [unitsCountByDepartment, setUnitsCountByDepartment] = useState({});\r\n  const [isAdd, setIsAdd] = useState(false);\r\n  const [ministryId, setMinistryId] = useState(\r\n    ministry_id || userDetail.ministryId\r\n  );\r\n\r\n  const [notificationStatus, setNotificationStatus] = useState(false);\r\n  const [notificationDetails, setNotificationDetails] = useState({\r\n    msg: \"\",\r\n    type: \"\",\r\n  });\r\n  const [dataload, setDataLoad] = useState(true);\r\n  const [viewMode, setViewMode] = useState(\"all\");\r\n\r\n  useEffect(\r\n    () => {\r\n      async function fetchAllDeparts() {\r\n        await axios\r\n          .get(department.showDepartments + \"/\" + ministryId)\r\n          .then((response) => {\r\n            if (response.data.status === true) {\r\n              setShow_AllDepartment(response.data.data);\r\n              setDataLoad(false);\r\n            } else {\r\n              setNotificationDetails({\r\n                msg: \"Error Loading Departments, Please Referesh The Page\",\r\n                type: \"danger\",\r\n              });\r\n              setNotificationStatus(true);\r\n              setDataLoad(false);\r\n            }\r\n          });\r\n      }\r\n      fetchAllDeparts();\r\n      async function fetchBudgets() {\r\n        await axios\r\n          .get(department.showBudgets + \"/\" + ministryId + \"/\" + activeTerm.id)\r\n          .then((response) => {\r\n            if (response.data.status === true) {\r\n              // setTotalUnits(response.data.totalUnits);\r\n              // setTotalAccountedUnits(response.data.totalAccountedUnits);\r\n              setUnitsCountByDepartment(response.data.unitsCountByDepartment);\r\n              setDataLoad(false);\r\n            } else {\r\n              setNotificationDetails({\r\n                msg: \"Error Loading Budgets, Please Referesh The Page\",\r\n                type: \"danger\",\r\n              });\r\n              setNotificationStatus(true);\r\n              setDataLoad(false);\r\n            }\r\n          });\r\n      }\r\n      fetchBudgets();\r\n    },\r\n    // eslint-disable-next-line\r\n    []\r\n  );\r\n\r\n  const [loading, setLoading] = useState(true);\r\n  function arrangeData(x) {\r\n    const labels = Object.keys(x);\r\n    const data = Object.values(x);\r\n\r\n    return {\r\n      labels: labels,\r\n      datasets: [\r\n        {\r\n          id: 1,\r\n          label: \"Unit Distribution\",\r\n          data: data,\r\n          backgroundColor: [\r\n            \"rgba(255, 206, 86)\",\r\n            \"rgba(75, 192, 192)\",\r\n            \"rgba(153, 102, 255)\",\r\n            \"rgba(255, 159, 64)\",\r\n            \"rgba(255, 99, 132)\",\r\n            \"rgba(54, 162, 235)\",\r\n          ],\r\n          borderColor: [\r\n            \"rgba(255, 206, 86, 1)\",\r\n            \"rgba(75, 192, 192, 1)\",\r\n            \"rgba(153, 102, 255, 1)\",\r\n            \"rgba(255, 159, 64, 1)\",\r\n            \"rgba(255, 99, 132, 1)\",\r\n            \"rgba(54, 162, 235, 1)\",\r\n          ],\r\n        },\r\n      ],\r\n    };\r\n  }\r\n\r\n  const [q, setQ] = useState(\"\");\r\n\r\n  return (\r\n    <>\r\n      {notificationStatus ? (\r\n        <Notifications details={notificationDetails} />\r\n      ) : null}\r\n      {!isAdd ? (\r\n        <div className=\"content\">\r\n          <Row>\r\n            {viewMode === \"all\" ? (\r\n              <Col md=\"12\">\r\n                {loading === true ? (\r\n                  <>\r\n                    <Card>\r\n                      <CardHeader>\r\n                        <CardTitle className=\"pull-left\" tag=\"h4\">\r\n                          Departments\r\n                        </CardTitle>\r\n                        <div\r\n                          className=\"pull-right\"\r\n                          style={{ marginBottom: \"20px\" }}\r\n                        >\r\n                          <Row>\r\n                            <Link style={{ paddingRight: \"10px\" }}>\r\n                              <Input\r\n                                placeholder=\"Search based on department name\"\r\n                                type=\"text\"\r\n                                value={q}\r\n                                style={{ width: \"100%\" }}\r\n                                onChange={(e) => setQ(e.target.value)}\r\n                              />\r\n                            </Link>\r\n\r\n                            <Link style={{ marginRight: \"15px\" }}>\r\n                              <Button\r\n                                className=\"btn-fill\"\r\n                                size=\"sm\"\r\n                                style={{ width: \"100%\" }}\r\n                                color=\"primary\"\r\n                                type=\"submit\"\r\n                                onClick={() => {\r\n                                  setIsAdd(true);\r\n                                }}\r\n                              >\r\n                                <IoMdAddCircle size={20} /> Add Department\r\n                              </Button>\r\n                            </Link>\r\n                          </Row>\r\n                        </div>\r\n                      </CardHeader>\r\n                    </Card>\r\n\r\n                    {dataload === false ? (\r\n                      <>\r\n                        {show_AllDepartment.length > 0 ? (\r\n                          <>\r\n                            <Card>\r\n                              <CardBody>\r\n                                <Table\r\n                                  className=\"tablesorter\"\r\n                                  responsive\r\n                                  style={{ overflow: \"unset\" }}\r\n                                >\r\n                                  <thead className=\"text-primary\">\r\n                                    <tr>\r\n                                      <th>Department Name</th>\r\n                                      <th>Description</th>\r\n                                      <th>Actions</th>\r\n                                    </tr>\r\n                                  </thead>\r\n                                  <tbody>\r\n                                    {show_AllDepartment.map((row, key) => (\r\n                                      <tr key={key}>\r\n                                        <td key={key}>{row.name} </td>\r\n                                        <td key={key}>{row.description} </td>\r\n                                        <td>\r\n                                          <Button\r\n                                            onClick={() => {\r\n                                              setCurrentDepartment(row);\r\n                                              setViewMode(\"current\");\r\n                                            }}\r\n                                            className=\"btn-fill\"\r\n                                            style={{ marginBottom: \"5px\" }}\r\n                                            color=\"primary\"\r\n                                            size=\"sm\"\r\n                                          >\r\n                                            Show\r\n                                          </Button>\r\n                                        </td>\r\n                                      </tr>\r\n                                    ))}\r\n                                  </tbody>\r\n                                </Table>\r\n                              </CardBody>\r\n                            </Card>\r\n                            <Row>\r\n                              <Col>\r\n                                <Card>\r\n                                  <CardBody>\r\n                                    <Bar\r\n                                      data={{\r\n                                        ...arrangeData(unitsCountByDepartment),\r\n                                      }}\r\n                                    />\r\n                                  </CardBody>\r\n                                </Card>\r\n                              </Col>\r\n                              <Col>\r\n                                <Card>\r\n                                  <CardBody>\r\n                                    <Bar\r\n                                      data={{\r\n                                        ...arrangeData(unitsCountByDepartment),\r\n                                      }}\r\n                                    />\r\n                                  </CardBody>\r\n                                </Card>\r\n                              </Col>\r\n                            </Row>\r\n                          </>\r\n                        ) : (\r\n                          <Card>\r\n                            <div\r\n                              style={{\r\n                                color: \"#39B54A\",\r\n                                textAlign: \"center\",\r\n                                padding: \"20px\",\r\n                              }}\r\n                            >\r\n                              <img\r\n                                src={empty}\r\n                                style={{ marginBottom: \"30px\" }}\r\n                                height=\"250px\"\r\n                                alt=\"Nothing to show yet\"\r\n                              />\r\n                              <br />\r\n                              <CardTitle tag=\"h4\">\r\n                                Nothing To Show Yet... Add Some Departments to\r\n                                The System\r\n                              </CardTitle>\r\n                            </div>\r\n                          </Card>\r\n                        )}\r\n                      </>\r\n                    ) : (\r\n                      \"Loading...\"\r\n                    )}\r\n                  </>\r\n                ) : (\r\n                  <Button\r\n                    style={{ width: \"100%\", marginBottom: \"15px\" }}\r\n                    onClick={() => setLoading(!loading)}\r\n                    className=\"btn-fill\"\r\n                    color=\"primary\"\r\n                  >\r\n                    <FiArrowLeft size={20} />{\" \"}\r\n                    <font style={{ paddingLeft: \"30px\" }}>Back To Home </font>\r\n                  </Button>\r\n                )}\r\n              </Col>\r\n            ) : null}\r\n\r\n            {viewMode === \"current\" ? (\r\n              <DepartmentData\r\n                currentDepartment={currentDepartment}\r\n                setCurrentDepartment={setCurrentDepartment}\r\n                setViewMode={setViewMode}\r\n              />\r\n            ) : null}\r\n          </Row>\r\n        </div>\r\n      ) : (\r\n        <>\r\n          <AddDepartment setIsAdd={setIsAdd} ministry_id={ministryId} />\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default AllDepartment;\r\n","C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\views\\ministry\\Expenditure.js",["227","228"],"import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { expenditure as expenditure_api } from \"../../data/api\";\r\n\r\nimport Notifications from \"components/Notification/Notification\";\r\nimport { FiArrowLeft, FiGrid } from \"react-icons/fi\";\r\nimport { IoMdAddCircle } from \"react-icons/io\";\r\nimport empty from \"../../assets/img/product.svg\";\r\nimport { Link } from \"react-router-dom\";\r\nimport ExpenditureData from \"./ExpenditureData\";\r\nimport { useAuth } from \"contexts/AuthContext\";\r\n\r\n// import DepartmentData from \"./DepartmentData\";\r\nimport {\r\n  Card,\r\n  CardHeader,\r\n  CardBody,\r\n  CardTitle,\r\n  Table,\r\n  Row,\r\n  Col,\r\n  Button,\r\n  Input,\r\n} from \"reactstrap\";\r\n\r\nfunction Expenditure({ department_id }) {\r\n  const [expenditure, setExpenditure] = useState([]);\r\n  const [currentExpenditure, setCurrentExpenditure] = useState({});\r\n  const { userDetail, activeTerm } = useAuth();\r\n  // const [totalUnits, setTotalUnits] = useState(0);\r\n  // const [totalAccountedUnits, setTotalAccountedUnits] = useState(0);\r\n  // const [unitsCountByDepartment, setUnitsCountByDepartment] = useState({});\r\n\r\n  const [notificationStatus, setNotificationStatus] = useState(false);\r\n  const [notificationDetails, setNotificationDetails] = useState({\r\n    msg: \"\",\r\n    type: \"\",\r\n  });\r\n\r\n  const [dataload, setDataLoad] = useState(true);\r\n  const [viewMode, setViewMode] = useState(\"all\");\r\n  const [isAdd, setIsAdd] = useState(false);\r\n\r\n  useEffect(\r\n    () => {\r\n      async function fetchExpenditure() {\r\n        await axios\r\n          .get(\r\n            expenditure_api.showAllExpenditures +\r\n              \"/\" +\r\n              userDetail.ministryId +\r\n              \"/\" +\r\n              activeTerm.id\r\n          )\r\n          .then((response) => {\r\n            if (response.data.status === true) {\r\n              setExpenditure(response.data.data);\r\n              // setTotalUnits(response.data.totalUnits);\r\n              // setTotalAccountedUnits(response.data.totalAccountedUnits);\r\n              // setUnitsCountByDepartment(response.data.unitsCountByDepartment);\r\n              setDataLoad(false);\r\n            } else {\r\n              setNotificationDetails({\r\n                msg: \"Error Loading Ministries, Please Referesh The Page\",\r\n                type: \"danger\",\r\n              });\r\n              setNotificationStatus(true);\r\n              setDataLoad(false);\r\n            }\r\n          });\r\n      }\r\n      fetchExpenditure();\r\n    },\r\n    // eslint-disable-next-line\r\n    []\r\n  );\r\n\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const [q, setQ] = useState(\"\");\r\n\r\n  return (\r\n    <>\r\n      {notificationStatus ? (\r\n        <Notifications details={notificationDetails} />\r\n      ) : null}\r\n      <div className=\"content\">\r\n        <Row>\r\n          {viewMode === \"all\" ? (\r\n            <Col>\r\n              {loading === true ? (\r\n                <>\r\n                  <Card>\r\n                    <CardHeader>\r\n                      <CardTitle className=\"pull-left\" tag=\"h4\">\r\n                        Expenditure\r\n                      </CardTitle>\r\n                      <div\r\n                        className=\"pull-right\"\r\n                        style={{ marginBottom: \"20px\" }}\r\n                      >\r\n                        <Row>\r\n                          <Link\r\n                            style={{\r\n                              paddingRight: \"10px\",\r\n                            }}\r\n                          >\r\n                            <Input\r\n                              placeholder=\"Search based on expenditure name\"\r\n                              type=\"text\"\r\n                              value={q}\r\n                              style={{ width: \"100%\" }}\r\n                              onChange={(e) => setQ(e.target.value)}\r\n                            />\r\n                          </Link>\r\n\r\n                          <Link style={{ marginRight: \"15px\" }}>\r\n                            <Button\r\n                              className=\"btn-fill\"\r\n                              size=\"sm\"\r\n                              style={{ width: \"100%\" }}\r\n                              color=\"primary\"\r\n                              type=\"submit\"\r\n                              onClick={() => {\r\n                                setIsAdd(true);\r\n                              }}\r\n                            >\r\n                              <IoMdAddCircle size={20} /> Print Report\r\n                            </Button>\r\n                          </Link>\r\n                        </Row>\r\n                      </div>\r\n                    </CardHeader>{\" \"}\r\n                  </Card>\r\n\r\n                  {dataload === false ? (\r\n                    <>\r\n                      {Object.keys(expenditure).length > 0 ? (\r\n                        <>\r\n                          <Card>\r\n                            <hr\r\n                              style={{\r\n                                backgroundColor: \"#aaa\",\r\n                                marginRight: \"2%\",\r\n                                marginLeft: \"2%\",\r\n                                marginTop: \"-15px\",\r\n                              }}\r\n                            />\r\n\r\n                            <CardBody>\r\n                              <Table\r\n                                className=\"tablesorter\"\r\n                                responsive\r\n                                style={{ overflow: \"unset\" }}\r\n                              >\r\n                                <thead className=\"text-primary\">\r\n                                  <tr>\r\n                                    <th>SN</th>\r\n                                    <th>Department Name</th>\r\n                                    <th>Total Amount: NGN</th>\r\n                                    <th>Actions</th>\r\n                                  </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                  {expenditure.map((row, key) => {\r\n                                    return (\r\n                                      <>\r\n                                        <tr key={key}>\r\n                                          <td>{key + 1} </td>\r\n                                          <td>\r\n                                            <b>{row.department_name}</b>\r\n                                            <br />\r\n                                            {row.units.map((item, k) => {\r\n                                              return (\r\n                                                <Row key={k}>\r\n                                                  <Col>\r\n                                                    Unit: {Object.keys(item)[0]}\r\n                                                  </Col>\r\n                                                  <Col>\r\n                                                    Amount:{\" \"}\r\n                                                    {Object.values(\r\n                                                      item\r\n                                                    )[0].toLocaleString()}\r\n                                                  </Col>\r\n                                                </Row>\r\n                                              );\r\n                                            })}\r\n                                          </td>\r\n                                          <td>{row.total.toLocaleString()}</td>\r\n                                          <td>\r\n                                            <div>\r\n                                              <Button\r\n                                                onClick={() => {\r\n                                                  setCurrentExpenditure(row);\r\n                                                  setViewMode(\"current\");\r\n                                                  // setHideDepartment(true);\r\n                                                }}\r\n                                                className=\"btn-fill\"\r\n                                                style={{\r\n                                                  marginBottom: \"5px\",\r\n                                                }}\r\n                                                color=\"primary\"\r\n                                                size=\"sm\"\r\n                                              >\r\n                                                Show\r\n                                              </Button>\r\n                                            </div>\r\n                                          </td>\r\n                                        </tr>\r\n                                      </>\r\n                                    );\r\n                                  })}\r\n                                </tbody>\r\n                              </Table>\r\n                            </CardBody>\r\n                          </Card>\r\n                        </>\r\n                      ) : (\r\n                        <Card>\r\n                          <div\r\n                            style={{\r\n                              color: \"#39B54A\",\r\n                              textAlign: \"center\",\r\n                              padding: \"20px\",\r\n                            }}\r\n                          >\r\n                            <img\r\n                              src={empty}\r\n                              style={{ marginBottom: \"30px\" }}\r\n                              height=\"250px\"\r\n                              alt=\"Nothing to show yet\"\r\n                            />\r\n                            <br />\r\n                            <CardTitle tag=\"h4\">\r\n                              Nothing To Show Yet... Add Some Units\r\n                            </CardTitle>\r\n                          </div>\r\n                        </Card>\r\n                      )}\r\n                    </>\r\n                  ) : (\r\n                    \"Loading...\"\r\n                  )}\r\n                </>\r\n              ) : (\r\n                <Button\r\n                  style={{ width: \"100%\", marginBottom: \"15px\" }}\r\n                  onClick={() => setLoading(!loading)}\r\n                  className=\"btn-fill\"\r\n                  color=\"primary\"\r\n                >\r\n                  <FiArrowLeft size={20} />{\" \"}\r\n                  <font style={{ paddingLeft: \"30px\" }}>\r\n                    Back To Expenditure{\" \"}\r\n                  </font>\r\n                </Button>\r\n              )}\r\n            </Col>\r\n          ) : null}\r\n\r\n          {viewMode === \"current\" ? (\r\n            <ExpenditureData\r\n              currentExpenditure={currentExpenditure}\r\n              setViewMode={setViewMode}\r\n            />\r\n          ) : null}\r\n        </Row>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Expenditure;\r\n","C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\views\\ministry\\AllUnits.js",["229","230"],"import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { unit } from \"../../data/api\";\r\n\r\nimport Notifications from \"components/Notification/Notification\";\r\nimport { FiArrowLeft } from \"react-icons/fi\";\r\nimport { IoMdAddCircle } from \"react-icons/io\";\r\nimport empty from \"../../assets/img/product.svg\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\nimport UnitData from \"./UnitData\";\r\nimport AddUnit from \"./AddUnit\";\r\nimport { useAuth } from \"contexts/AuthContext\";\r\n\r\n// import DepartmentData from \"./DepartmentData\";\r\nimport {\r\n  Card,\r\n  CardHeader,\r\n  CardBody,\r\n  CardTitle,\r\n  Table,\r\n  Row,\r\n  Col,\r\n  Button,\r\n  Input,\r\n} from \"reactstrap\";\r\n\r\nfunction Unit({ department_id }) {\r\n  const [units, setUnits] = useState([]);\r\n  const [currentUnit, setCurrentUnit] = useState({});\r\n  const { userDetail } = useAuth();\r\n\r\n  const [notificationStatus, setNotificationStatus] = useState(false);\r\n  const [notificationDetails, setNotificationDetails] = useState({\r\n    msg: \"\",\r\n    type: \"\",\r\n  });\r\n  const [dataload, setDataLoad] = useState(true);\r\n  const [viewMode, setViewMode] = useState(\"all\");\r\n  const [isAdd, setIsAdd] = useState(false);\r\n\r\n  useEffect(\r\n    () => {\r\n      async function fetchAllUnits() {\r\n        await axios\r\n          .get(unit.showAllUnits + \"/\" + userDetail.ministryId)\r\n          .then((response) => {\r\n            if (response.data.status === true) {\r\n              setUnits(response.data.data);\r\n              setDataLoad(false);\r\n            } else {\r\n              setNotificationDetails({\r\n                msg: \"Error Loading Units, Please Referesh The Page\",\r\n                type: \"danger\",\r\n              });\r\n              setNotificationStatus(true);\r\n              setDataLoad(false);\r\n            }\r\n          });\r\n      }\r\n      fetchAllUnits();\r\n    },\r\n    // eslint-disable-next-line\r\n    []\r\n  );\r\n\r\n  async function updateUnit() {\r\n    await axios.patch(unit.updateUnit, currentUnit).then((res) => {\r\n      if (res.data.status) {\r\n        setNotificationDetails({\r\n          msg: \"Unit Updated Successfully\",\r\n          type: \"success\",\r\n          change: res.data.change,\r\n        });\r\n      } else {\r\n        setNotificationDetails({ msg: \"Error Updating Unit\", type: \"danger\" });\r\n      }\r\n      setNotificationStatus(true);\r\n    });\r\n  }\r\n\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const [q, setQ] = useState(\"\");\r\n\r\n  return (\r\n    <>\r\n      {notificationStatus ? (\r\n        <Notifications details={notificationDetails} />\r\n      ) : null}\r\n      <div className=\"content\">\r\n        <Row>\r\n          {viewMode === \"all\" ? (\r\n            <Col>\r\n              {loading === true ? (\r\n                <>\r\n                  {isAdd ? (\r\n                    <AddUnit\r\n                      department_id={department_id}\r\n                      setIsAdd={setIsAdd}\r\n                    />\r\n                  ) : (\r\n                    <>\r\n                      <Card>\r\n                        <CardHeader>\r\n                          <CardTitle className=\"pull-left\" tag=\"h4\">\r\n                            Units\r\n                          </CardTitle>\r\n                          <div\r\n                            className=\"pull-right\"\r\n                            style={{ marginBottom: \"20px\" }}\r\n                          >\r\n                            <Row>\r\n                              <Link\r\n                                style={{\r\n                                  paddingRight: \"10px\",\r\n                                }}\r\n                              >\r\n                                <Input\r\n                                  placeholder=\"Search based on unit name\"\r\n                                  type=\"text\"\r\n                                  value={q}\r\n                                  style={{ width: \"100%\" }}\r\n                                  onChange={(e) => setQ(e.target.value)}\r\n                                />\r\n                              </Link>\r\n                            </Row>\r\n                          </div>\r\n                        </CardHeader>\r\n                      </Card>\r\n\r\n                      {dataload === false ? (\r\n                        <>\r\n                          {units.length > 0 ? (\r\n                            <>\r\n                              <Card>\r\n                                <hr\r\n                                  style={{\r\n                                    backgroundColor: \"#aaa\",\r\n                                    marginRight: \"2%\",\r\n                                    marginLeft: \"2%\",\r\n                                    marginTop: \"-15px\",\r\n                                  }}\r\n                                />\r\n                                <CardBody>\r\n                                  <Table\r\n                                    className=\"tablesorter\"\r\n                                    responsive\r\n                                    style={{ overflow: \"unset\" }}\r\n                                  >\r\n                                    <thead className=\"text-primary\">\r\n                                      <tr>\r\n                                        <th>SN</th>\r\n                                        <th>Unit Name</th>\r\n                                        <th>Unit Number</th>\r\n                                        <th>Department</th>\r\n                                        <th>Actions</th>\r\n                                      </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                      {units.map((row, key) => (\r\n                                        <tr key={key}>\r\n                                          <td>{key + 1} </td>\r\n                                          <td>{row.name} </td>\r\n                                          <td>{row.number} </td>\r\n                                          <td>{row.Department.name} </td>\r\n                                          <td>\r\n                                            <div>\r\n                                              <Button\r\n                                                onClick={() => {\r\n                                                  setCurrentUnit(row);\r\n                                                  setViewMode(\"current\");\r\n                                                }}\r\n                                                className=\"btn-fill\"\r\n                                                style={{ marginBottom: \"5px\" }}\r\n                                                color=\"primary\"\r\n                                                size=\"sm\"\r\n                                              >\r\n                                                Show\r\n                                              </Button>\r\n                                            </div>\r\n                                          </td>\r\n                                        </tr>\r\n                                      ))}\r\n                                    </tbody>\r\n                                  </Table>\r\n                                </CardBody>\r\n                              </Card>\r\n                            </>\r\n                          ) : (\r\n                            <Card>\r\n                              <div\r\n                                style={{\r\n                                  color: \"#39B54A\",\r\n                                  textAlign: \"center\",\r\n                                  padding: \"20px\",\r\n                                }}\r\n                              >\r\n                                <img\r\n                                  src={empty}\r\n                                  style={{ marginBottom: \"30px\" }}\r\n                                  height=\"250px\"\r\n                                  alt=\"Nothing to show yet\"\r\n                                />\r\n                                <br />\r\n                                <CardTitle tag=\"h4\">\r\n                                  Nothing To Show Yet... Add Some Units\r\n                                </CardTitle>\r\n                              </div>\r\n                            </Card>\r\n                          )}\r\n                        </>\r\n                      ) : (\r\n                        \"Loading...\"\r\n                      )}\r\n                    </>\r\n                  )}\r\n                </>\r\n              ) : (\r\n                <Button\r\n                  style={{ width: \"100%\", marginBottom: \"15px\" }}\r\n                  onClick={() => setLoading(!loading)}\r\n                  className=\"btn-fill\"\r\n                  color=\"primary\"\r\n                >\r\n                  <FiArrowLeft size={20} />{\" \"}\r\n                  <font style={{ paddingLeft: \"30px\" }}>Back To Units </font>\r\n                </Button>\r\n              )}\r\n            </Col>\r\n          ) : null}\r\n\r\n          {viewMode === \"current\" ? (\r\n            <UnitData currentUnit={currentUnit} setViewMode={setViewMode} />\r\n          ) : null}\r\n        </Row>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Unit;\r\n","C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\views\\admin\\BudgetRequest.js",[],"C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\views\\ministry\\Report.js",["231","232","233","234"],"import React, { useState, useEffect, useRef } from \"react\";\r\nimport { department, unit, term, report, ministry } from \"../../data/api\";\r\nimport Notifications from \"components/Notification/Notification\";\r\nimport axios from \"axios\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\nimport { BiExport } from \"react-icons/bi\";\r\nimport { AiFillPrinter } from \"react-icons/ai\";\r\nimport { useAuth } from \"contexts/AuthContext\";\r\nimport { saveAs } from \"file-saver\";\r\n\r\n// reactstrap components\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardHeader,\r\n  CardBody,\r\n  CardTitle,\r\n  FormGroup,\r\n  Table,\r\n  Label,\r\n  Input,\r\n  Row,\r\n  Col,\r\n} from \"reactstrap\";\r\n\r\nfunction Report() {\r\n  const printDiv = useRef(null);\r\n  const { userDetail } = useAuth();\r\n  const [notificationStatus, setNotificationStatus] = useState(false);\r\n  const [notificationDetails, setNotificationDetails] = useState({\r\n    msg: \"\",\r\n    type: \"\",\r\n  });\r\n\r\n  const [searchData, setSearchData] = useState({\r\n    operation: \"expenditure\",\r\n    ministryId: userDetail.ministryId || 0,\r\n  });\r\n\r\n  const [terms, setTerms] = useState([]);\r\n  const [departments, setDepartments] = useState([]);\r\n  const [units, setUnits] = useState([]);\r\n  const [ministries, setMinistries] = useState([]);\r\n  const [ministryName, setMinistryName] = useState(\r\n    userDetail?.Ministry?.name || \"All\"\r\n  );\r\n\r\n  const [reportData, setReportData] = useState({});\r\n\r\n  const handlePrint = () => {\r\n    const printContents = printDiv.current.innerHTML;\r\n    const originalContents = document.body.innerHTML;\r\n\r\n    document.body.innerHTML = printContents;\r\n\r\n    window.print();\r\n\r\n    document.body.innerHTML = originalContents;\r\n  };\r\n\r\n  const handleExport = () => {\r\n    if (!reportData.operationData) return;\r\n\r\n    let csvString = \"DEPARTMENT,UNIT,DESCRIPTION,AMOUNT,DATE\\n\";\r\n    Object.entries(reportData.operationData).forEach(([department, data]) => {\r\n      csvString += `${data.Department.name},${data.Unit.name},${\r\n        data.description\r\n      },${data.amount},${new Date(data.date).toLocaleDateString()}\\n`;\r\n    });\r\n\r\n    const blob = new Blob([csvString], { type: \"text/csv;charset=utf-8\" });\r\n    saveAs(blob, \"report.csv\");\r\n  };\r\n\r\n  useEffect(async () => {\r\n    async function fetchTerm() {\r\n      await axios.get(term.showTerm).then((response) => {\r\n        if (response.data.status === true) {\r\n          setTerms(response.data.data);\r\n          // setDataLoad(false);\r\n        } else {\r\n          setNotificationDetails({\r\n            msg: \"Error Loading Terms\",\r\n            type: \"danger\",\r\n          });\r\n          setNotificationStatus(true);\r\n          // setDataLoad(false);\r\n        }\r\n      });\r\n    }\r\n\r\n    async function fetchMinistries() {\r\n      await axios.get(ministry.showAllMinistries).then((response) => {\r\n        if (response.data.status === true) {\r\n          setMinistries(response.data.data);\r\n          // setDataLoad(false);\r\n        } else {\r\n          setNotificationDetails({\r\n            msg: \"Error Loading Ministries\",\r\n            type: \"danger\",\r\n          });\r\n          setNotificationStatus(true);\r\n          // setDataLoad(false);\r\n        }\r\n      });\r\n    }\r\n\r\n    if (userDetail.type === \"admin\") {\r\n      fetchMinistries();\r\n    }\r\n\r\n    fetchTerm();\r\n  }, []);\r\n\r\n  useEffect(async () => {\r\n    let endpoint = \"\";\r\n    if (searchData.operation === \"budget\") {\r\n      endpoint = report.expenditure;\r\n    } else {\r\n      endpoint = report.budget;\r\n    }\r\n    async function fetchReport() {\r\n      await axios.get(endpoint, { params: searchData }).then((response) => {\r\n        if (response.data.status === true) {\r\n          setReportData(response.data.data);\r\n          // setDataLoad(false);,\r\n        } else {\r\n          setNotificationDetails({\r\n            msg: \"Error Loading Report\",\r\n            type: \"danger\",\r\n          });\r\n          setNotificationStatus(true);\r\n          // setDataLoad(false);\r\n        }\r\n      });\r\n    }\r\n\r\n    async function fetchDepartments() {\r\n      await axios\r\n        .get(\r\n          department.showAllDepartmentsMinistry + \"/\" + searchData.ministryId\r\n        )\r\n        .then((response) => {\r\n          if (response.data.status === true) {\r\n            setDepartments(response.data.data);\r\n            // setDataLoad(false);\r\n          } else {\r\n            setNotificationDetails({\r\n              msg: \"Error Loading Departments\",\r\n              type: \"danger\",\r\n            });\r\n            setNotificationStatus(true);\r\n            // setDataLoad(false);\r\n          }\r\n        });\r\n    }\r\n    fetchDepartments();\r\n    fetchReport();\r\n  }, [searchData]);\r\n\r\n  async function fetchUnits(departmentId) {\r\n    await axios.get(unit.showUnits + \"/\" + departmentId).then((response) => {\r\n      if (response.data.status === true) {\r\n        setUnits(response.data.data);\r\n        // setDataLoad(false);\r\n      } else {\r\n        setNotificationDetails({\r\n          msg: \"Error Loading Units\",\r\n          type: \"danger\",\r\n        });\r\n        setNotificationStatus(true);\r\n        // setDataLoad(false);\r\n      }\r\n    });\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {notificationStatus ? (\r\n        <Notifications details={notificationDetails} />\r\n      ) : null}\r\n      <div className=\"content\">\r\n        <Row>\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle className=\"pull-left\" tag=\"h4\">\r\n                Report\r\n              </CardTitle>\r\n              <div className=\"pull-right\" style={{ marginBottom: \"20px\" }}>\r\n                <Row>\r\n                  <Link style={{ marginRight: \"15px\" }}>\r\n                    <Button\r\n                      className=\"btn-fill\"\r\n                      size=\"sm\"\r\n                      style={{ width: \"100%\" }}\r\n                      color=\"primary\"\r\n                      type=\"submit\"\r\n                      onClick={handleExport}\r\n                    >\r\n                      <BiExport size={20} /> Export Report\r\n                    </Button>\r\n                  </Link>{\" \"}\r\n                  <Link style={{ marginRight: \"15px\" }}>\r\n                    <Button\r\n                      onClick={handlePrint}\r\n                      className=\"btn-fill\"\r\n                      size=\"sm\"\r\n                      style={{ width: \"100%\" }}\r\n                      color=\"primary\"\r\n                      type=\"submit\"\r\n                    >\r\n                      <AiFillPrinter size={20} /> Print Report\r\n                    </Button>\r\n                  </Link>\r\n                </Row>\r\n              </div>\r\n            </CardHeader>\r\n            <CardBody>\r\n              <Row>\r\n                {userDetail.type === \"admin\" ? (\r\n                  <Col md=\"3\">\r\n                    <FormGroup>\r\n                      <Label for=\"term\">Ministry</Label>\r\n                      <Input\r\n                        id=\"ministry\"\r\n                        name=\"select\"\r\n                        type=\"select\"\r\n                        onChange={(e) => {\r\n                          setSearchData({\r\n                            ...searchData,\r\n                            ministryId: JSON.parse(e.target.value).id,\r\n                          });\r\n                          setMinistryName(JSON.parse(e.target.value).name);\r\n                          setUnits([]);\r\n                        }}\r\n                      >\r\n                        <option value={0}>All</option>\r\n                        {ministries.map((item, key) => {\r\n                          return (\r\n                            <option\r\n                              key={key}\r\n                              value={JSON.stringify({\r\n                                id: item.id,\r\n                                name: item.name,\r\n                              })}\r\n                            >\r\n                              {item.name}\r\n                            </option>\r\n                          );\r\n                        })}\r\n                      </Input>\r\n                    </FormGroup>\r\n                  </Col>\r\n                ) : null}\r\n\r\n                <Col>\r\n                  <FormGroup>\r\n                    <Label for=\"term\">Term</Label>\r\n                    <Input\r\n                      id=\"term\"\r\n                      name=\"select\"\r\n                      type=\"select\"\r\n                      onChange={(e) => {\r\n                        setSearchData({\r\n                          ...searchData,\r\n                          termId: e.target.value,\r\n                        });\r\n                      }}\r\n                    >\r\n                      <option value={0}>All</option>\r\n                      {terms.map((item, key) => {\r\n                        return (\r\n                          <option key={key} value={item.id}>\r\n                            {item.name}\r\n                          </option>\r\n                        );\r\n                      })}\r\n                    </Input>\r\n                  </FormGroup>\r\n                </Col>\r\n\r\n                <Col>\r\n                  <FormGroup>\r\n                    <Label for=\"department\">Departments</Label>\r\n                    <Input\r\n                      id=\"department\"\r\n                      name=\"select\"\r\n                      type=\"select\"\r\n                      onChange={(e) => {\r\n                        setSearchData({\r\n                          ...searchData,\r\n                          departmentId: e.target.value,\r\n                        });\r\n                        fetchUnits(e.target.value);\r\n                        // setAllAssets(JSON.parse(e.target.value).AC);\r\n                      }}\r\n                    >\r\n                      <option value={0}>All Departments</option>\r\n                      {departments.map((item, key) => {\r\n                        return (\r\n                          <option key={key} value={item.id}>\r\n                            {item.name}\r\n                          </option>\r\n                        );\r\n                      })}\r\n                    </Input>\r\n                  </FormGroup>\r\n                </Col>\r\n\r\n                <Col>\r\n                  <FormGroup>\r\n                    <Label for=\"department\">Units</Label>\r\n                    <Input\r\n                      id=\"unit\"\r\n                      name=\"select\"\r\n                      type=\"select\"\r\n                      onChange={(e) => {\r\n                        setSearchData({\r\n                          ...searchData,\r\n                          unitId: e.target.value,\r\n                        });\r\n                        // setAllAssets(JSON.parse(e.target.value).AC);\r\n                      }}\r\n                    >\r\n                      <option value={0}>All Units</option>\r\n                      {units.map((item, key) => {\r\n                        return (\r\n                          <option key={key} value={item.id}>\r\n                            {item.name}\r\n                          </option>\r\n                        );\r\n                      })}\r\n                    </Input>\r\n                  </FormGroup>\r\n                </Col>\r\n\r\n                <Col>\r\n                  <FormGroup>\r\n                    <Label for=\"operation\">Operation</Label>\r\n                    <Input\r\n                      id=\"operation\"\r\n                      name=\"select\"\r\n                      type=\"select\"\r\n                      defaultValue={\"budget\"}\r\n                      onChange={(e) => {\r\n                        setSearchData({\r\n                          ...searchData,\r\n                          operation: e.target.value,\r\n                        });\r\n                        // setAllAssets(JSON.parse(e.target.value).AC);\r\n                      }}\r\n                    >\r\n                      <option>expenditure</option>\r\n                      <option>budget</option>\r\n                    </Input>\r\n                  </FormGroup>\r\n                </Col>\r\n              </Row>\r\n            </CardBody>\r\n          </Card>\r\n\r\n          <Card>\r\n            {\" \"}\r\n            <div ref={printDiv}>\r\n              <hr />\r\n\r\n              {reportData?.operationData?.length || 0 > 0 ? (\r\n                <div>\r\n                  <CardHeader tag=\"b\">Ministry: {ministryName}</CardHeader>\r\n                  <hr />\r\n                  <CardHeader>\r\n                    ALL {searchData.operation.toUpperCase()}S BY DEPARTMENT\r\n                  </CardHeader>\r\n                  <br />\r\n                  <CardBody>\r\n                    <Table>\r\n                      <thead>\r\n                        <tr>\r\n                          <th>Department</th>\r\n                          <th>Amount</th>\r\n                        </tr>\r\n                      </thead>\r\n                      <tbody>\r\n                        {Object.keys(\r\n                          reportData?.operationByDepartment || {}\r\n                        ).map((department) => (\r\n                          <>\r\n                            <tr key={unit}>\r\n                              <td>{department}</td>\r\n                              <td>\r\n                                {\r\n                                  reportData?.operationByDepartment[department]\r\n                                    .total\r\n                                }\r\n                              </td>\r\n                            </tr>\r\n                          </>\r\n                        ))}\r\n                      </tbody>\r\n                    </Table>\r\n                  </CardBody>\r\n                  <CardHeader>\r\n                    ALL {searchData.operation.toUpperCase()}S BY UNIT\r\n                  </CardHeader>\r\n                  <br />\r\n                  <CardBody>\r\n                    <Table>\r\n                      <thead>\r\n                        <tr>\r\n                          <th>Department</th>\r\n                          <th>Unit</th>\r\n                          <th>Amount</th>\r\n                        </tr>\r\n                      </thead>\r\n                      <tbody>\r\n                        {Object.keys(\r\n                          reportData?.operationByDepartment || {}\r\n                        ).map((department) => (\r\n                          <>\r\n                            {Object.keys(\r\n                              reportData?.operationByDepartment[department][\r\n                                \"units\"\r\n                              ] || {}\r\n                            ).map((unit) => (\r\n                              <tr key={unit}>\r\n                                <td>{department}</td>\r\n                                <td>{unit}</td>\r\n                                <td>\r\n                                  {reportData?.operationByDepartment[\r\n                                    department\r\n                                  ][\"units\"][unit] || {}}\r\n                                </td>\r\n                              </tr>\r\n                            ))}\r\n                          </>\r\n                        ))}\r\n                      </tbody>\r\n                    </Table>\r\n                  </CardBody>\r\n                  <CardHeader>\r\n                    All {searchData.operation.toUpperCase()}S\r\n                  </CardHeader>\r\n                  <CardBody>\r\n                    <Table>\r\n                      <thead>\r\n                        <tr>\r\n                          <th>Department</th>\r\n                          <th>Unit</th>\r\n                          <th>Description</th>\r\n                          <th>Amount</th>\r\n                          <th>Date</th>\r\n                        </tr>\r\n                      </thead>\r\n                      <tbody>\r\n                        {(reportData?.operationData || []).map((ex, key) => (\r\n                          <tr key={key}>\r\n                            <td>{ex.Department.name}</td>\r\n                            <td>{ex.Unit.name}</td>\r\n                            <td>{ex.description || ex?.data?.notes}</td>\r\n                            <td>{ex.amount}</td>\r\n                            <td>\r\n                              {new Date(\r\n                                ex.date || ex.createdAt\r\n                              ).toLocaleDateString()}\r\n                            </td>\r\n                          </tr>\r\n                        ))}\r\n                      </tbody>\r\n                    </Table>\r\n                  </CardBody>{\" \"}\r\n                </div>\r\n              ) : (\r\n                <h3 style={{ textAlign: \"center\" }}>NO REPORT!</h3>\r\n              )}\r\n            </div>\r\n          </Card>\r\n        </Row>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Report;\r\n","C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\views\\admin\\Ministry.js",[],"C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\views\\admin\\AllUnit.js",[],"C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\views\\admin\\AllDepartment.js",[],"C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\views\\admin\\Term.js",[],"C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\views\\ministry\\AddDepartment.js",[],"C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\views\\admin\\MinistryData.js",[],"C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\views\\ministry\\UnitData.js",[],"C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\views\\ministry\\DepartmentData.js",["235","236"],"import React, { useState, useEffect } from \"react\";\r\nimport { HiArrowNarrowLeft } from \"react-icons/hi\";\r\nimport { MdDescription } from \"react-icons/md\";\r\nimport axios from \"axios\";\r\nimport Units from \"./Unit\";\r\nimport { useAuth } from \"contexts/AuthContext\";\r\n\r\nimport { Doughnut } from \"react-chartjs-2\";\r\nimport { expenditure, budget, department } from \"data/api\";\r\nimport { BiEdit } from \"react-icons/bi\";\r\nimport Notifications from \"components/Notification/Notification\";\r\n\r\n// reactstrap components\r\nimport {\r\n  Card,\r\n  CardHeader,\r\n  CardBody,\r\n  CardTitle,\r\n  Table,\r\n  Row,\r\n  Col,\r\n  Button,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  Form,\r\n  FormGroup,\r\n  Input,\r\n} from \"reactstrap\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction DepartmentData({\r\n  currentDepartment,\r\n  setCurrentDepartment,\r\n  setViewMode,\r\n}) {\r\n  const [HideDepartment, setHideDepartment] = useState(false);\r\n  const [graphDetails, setGraphDetails] = useState({});\r\n  const { activeTerm } = useAuth();\r\n  const [notificationStatus, setNotificationStatus] = useState(false);\r\n  const [notificationDetails, setNotificationDetails] = useState({});\r\n\r\n  const [expenditures, setExpenditures] = useState([]);\r\n  const [unitExpenditures, setUnitExpenditures] = useState([]);\r\n  const [modal, setModal] = useState(false);\r\n  const toggle = () => setModal(!modal);\r\n\r\n  const [type, setType] = useState(\"\");\r\n\r\n  function arrangeData(gd, isBudget) {\r\n    let labels = [];\r\n    let data = [];\r\n\r\n    if (isBudget) {\r\n      gd.map((item) => {\r\n        labels.push(item.Unit.name);\r\n        data.push(item.amount);\r\n      });\r\n    } else {\r\n      labels = Object.keys(gd);\r\n      data = Object.values(gd);\r\n    }\r\n\r\n    return {\r\n      labels: labels,\r\n      datasets: [\r\n        {\r\n          id: 1,\r\n          label: \"Buget : Expenditure\",\r\n          data: data,\r\n          backgroundColor: [\r\n            \"rgba(255, 206, 86)\",\r\n            \"rgba(75, 192, 192)\",\r\n            \"rgba(153, 102, 255)\",\r\n            \"rgba(255, 159, 64)\",\r\n          ],\r\n          borderColor: [\r\n            \"rgba(255, 206, 86, 1)\",\r\n            \"rgba(75, 192, 192, 1)\",\r\n            \"rgba(153, 102, 255, 1)\",\r\n            \"rgba(255, 159, 64, 1)\",\r\n          ],\r\n        },\r\n      ],\r\n    };\r\n  }\r\n\r\n  useEffect(() => {\r\n    async function fetchBudgetExpenditure() {\r\n      await axios\r\n        .get(\r\n          expenditure.showBudgetVsExpenditure +\r\n            \"/\" +\r\n            activeTerm.id +\r\n            \"/\" +\r\n            currentDepartment.id\r\n        )\r\n        .then(async (response) => {\r\n          if (response.data.status === true) {\r\n            //getting unit budgets\r\n            await axios\r\n              .get(\r\n                budget.showUnitBudgets +\r\n                  \"/\" +\r\n                  activeTerm.id +\r\n                  \"/\" +\r\n                  currentDepartment.id\r\n              )\r\n              .then((response1) => {\r\n                if (response1.data.status === true) {\r\n                  setGraphDetails({\r\n                    bVSe: response.data.data,\r\n                    unitBudgets: response1.data.data,\r\n                  });\r\n                  // setDataLoad(false);\r\n                } else {\r\n                  setNotificationDetails({\r\n                    msg: \"Error Loading Expenditure VS Budget Please Referesh The Page\",\r\n                    type: \"danger\",\r\n                  });\r\n                  setNotificationStatus(true);\r\n                  // setDataLoad(false);\r\n                }\r\n              });\r\n\r\n            // setDataLoad(false);\r\n          } else {\r\n            setNotificationDetails({\r\n              msg: \"Error Loading Expenditure VS Budget Please Referesh The Page\",\r\n              type: \"danger\",\r\n            });\r\n            setNotificationStatus(true);\r\n            // setDataLoad(false);\r\n          }\r\n        });\r\n    }\r\n    async function fetchExpenditure() {\r\n      await axios\r\n        .get(\r\n          expenditure.showExpenditureForDepartment +\r\n            \"/\" +\r\n            activeTerm.id +\r\n            \"/\" +\r\n            currentDepartment.id\r\n        )\r\n        .then((response) => {\r\n          if (response.data.status === true) {\r\n            setExpenditures(response.data.data);\r\n            // setDataLoad(false);\r\n          } else {\r\n            setNotificationDetails({\r\n              msg: \"Error Loading Expenditures Please Referesh The Page\",\r\n              type: \"danger\",\r\n            });\r\n            setNotificationStatus(true);\r\n            // setDataLoad(false);\r\n          }\r\n        });\r\n    }\r\n\r\n    async function fetchUnitExpenditure() {\r\n      await axios\r\n        .get(\r\n          expenditure.showUnitExpenses +\r\n            \"/\" +\r\n            activeTerm.id +\r\n            \"/\" +\r\n            currentDepartment.id\r\n        )\r\n        .then((response) => {\r\n          if (response.data.status === true) {\r\n            setUnitExpenditures(response.data.data);\r\n            // setDataLoad(false);\r\n          } else {\r\n            setNotificationDetails({\r\n              msg: \"Error Loading Expenditures Please Referesh The Page\",\r\n              type: \"danger\",\r\n            });\r\n            setNotificationStatus(true);\r\n            // setDataLoad(false);\r\n          }\r\n        });\r\n    }\r\n    fetchExpenditure();\r\n    fetchUnitExpenditure();\r\n    fetchBudgetExpenditure();\r\n  }, []);\r\n\r\n  async function updateDepartment() {\r\n    await axios\r\n      .patch(\r\n        department.updateDepartment + \"/\" + currentDepartment.id,\r\n        currentDepartment\r\n      )\r\n      .then((res) => {\r\n        if (res.data.status) {\r\n          setNotificationDetails({\r\n            msg: \"Department Updated Successfully\",\r\n            type: \"success\",\r\n            change: res.data.change,\r\n          });\r\n        } else {\r\n          setNotificationDetails({\r\n            msg: \"Error Updating Department\",\r\n            type: \"danger\",\r\n          });\r\n        }\r\n        setNotificationStatus(true);\r\n      });\r\n  }\r\n  return (\r\n    <>\r\n      {notificationStatus ? (\r\n        <Notifications details={notificationDetails} />\r\n      ) : null}\r\n      {HideDepartment ? null : (\r\n        <Col md={12}>\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle className=\"pull-left\" tag=\"h4\">\r\n                {currentDepartment.name}\r\n              </CardTitle>\r\n              <div className=\"pull-right\" style={{ marginBottom: \"20px\" }}>\r\n                <Row>\r\n                  <Link>\r\n                    <Button\r\n                      className=\"btn-fill\"\r\n                      onClick={() => {\r\n                        setType(\"unit\");\r\n                        toggle();\r\n                      }}\r\n                      style={{ marginRight: \"15px\" }}\r\n                      color=\"primary\"\r\n                      type=\"submit\"\r\n                      size=\"sm\"\r\n                    >\r\n                      {\" \"}\r\n                      Units\r\n                    </Button>\r\n                  </Link>\r\n                  <Link>\r\n                    <Button\r\n                      className=\"btn-fill\"\r\n                      onClick={() => {\r\n                        setType(\"department\");\r\n                        toggle();\r\n                      }}\r\n                      style={{ marginRight: \"15px\" }}\r\n                      color=\"primary\"\r\n                      type=\"submit\"\r\n                      size=\"sm\"\r\n                    >\r\n                      <BiEdit size={20} /> Edit Department\r\n                    </Button>\r\n                  </Link>\r\n                  <Link>\r\n                    <Button\r\n                      className=\"btn-fill\"\r\n                      onClick={() => {\r\n                        setViewMode(\"all\");\r\n                      }}\r\n                      style={{ marginRight: \"15px\" }}\r\n                      color=\"primary\"\r\n                      type=\"submit\"\r\n                      size=\"sm\"\r\n                    >\r\n                      <HiArrowNarrowLeft size={20} /> Back to Departments\r\n                    </Button>\r\n                  </Link>\r\n                </Row>\r\n              </div>\r\n            </CardHeader>\r\n            <CardBody>\r\n              <MdDescription /> Description: {currentDepartment.description}\r\n            </CardBody>\r\n          </Card>\r\n        </Col>\r\n      )}\r\n      <Col md={6}>\r\n        <Card>\r\n          <CardHeader>Budget : Expenditure Ratio</CardHeader>\r\n          <CardBody>\r\n            <Row>\r\n              <Doughnut\r\n                datasetIdKey=\"id\"\r\n                data={{\r\n                  ...arrangeData(graphDetails.bVSe || {}),\r\n                }}\r\n              />\r\n            </Row>\r\n          </CardBody>\r\n        </Card>\r\n      </Col>\r\n      <Col md={6}>\r\n        <Card>\r\n          <CardHeader>Unit : Budget Ratio</CardHeader>\r\n          <CardBody>\r\n            <Row>\r\n              <Doughnut\r\n                datasetIdKey=\"id\"\r\n                data={{\r\n                  ...arrangeData(graphDetails.unitBudgets || [], true),\r\n                }}\r\n              />\r\n            </Row>\r\n          </CardBody>\r\n        </Card>\r\n      </Col>\r\n\r\n      <Col md={6}>\r\n        <Card>\r\n          <CardHeader>Individual Expenses</CardHeader>\r\n          <CardBody>\r\n            <Table\r\n              className=\"tablesorter\"\r\n              responsive\r\n              style={{ overflow: \"unset\" }}\r\n            >\r\n              <thead className=\"text-primary\">\r\n                <tr>\r\n                  <th>SN</th>\r\n                  <th>Unit Name</th>\r\n                  <th>Description</th>\r\n                  <th>Date Created</th>\r\n                  <th>Amount</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {expenditures.map((item, key) => {\r\n                  return (\r\n                    <tr>\r\n                      <td>{key + 1}</td>\r\n                      <td>{item.Unit.name}</td>\r\n                      <td>\r\n                        {item.description} <br />\r\n                      </td>\r\n                      <td>{new Date(item.date).toLocaleDateString()}</td>\r\n                      <td> {item.amount.toLocaleString()}</td>\r\n\r\n                      <br />\r\n                    </tr>\r\n                  );\r\n                })}\r\n              </tbody>\r\n            </Table>\r\n          </CardBody>\r\n        </Card>\r\n      </Col>\r\n\r\n      <Col md={6}>\r\n        <Card>\r\n          <CardHeader>Unit Expenses</CardHeader>\r\n          <CardBody>\r\n            <Table\r\n              className=\"tablesorter\"\r\n              responsive\r\n              style={{ overflow: \"unset\" }}\r\n            >\r\n              <thead className=\"text-primary\">\r\n                <tr>\r\n                  <th>SN</th>\r\n                  <th>Unit Name</th>\r\n                  <th>Amount (NGN)</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {/* {JSON.stringify(currentBudget)} */}\r\n                {Object.keys(unitExpenditures).map((item, key) => {\r\n                  return (\r\n                    <tr>\r\n                      <td>{key + 1}</td>\r\n                      <td>{item}</td>\r\n                      <td>\r\n                        {unitExpenditures[item].totalAmount.toLocaleString()}\r\n                      </td>\r\n                    </tr>\r\n                  );\r\n                })}\r\n              </tbody>\r\n            </Table>\r\n          </CardBody>\r\n        </Card>\r\n      </Col>\r\n\r\n      <Modal\r\n        isOpen={modal}\r\n        toggle={toggle}\r\n        backdrop={true}\r\n        backdropClassName=\"modal-backdrop-dark\"\r\n        size=\"lg\"\r\n      >\r\n        <ModalHeader toggle={toggle}>\r\n          Viewing: {type.toLocaleUpperCase()}\r\n        </ModalHeader>\r\n        <ModalBody style={{ textAlign: \"center\" }}>\r\n          {type === \"unit\" ? (\r\n            <>\r\n              <Units\r\n                department_id={currentDepartment.id}\r\n                setHideDepartment={setHideDepartment}\r\n              />\r\n            </>\r\n          ) : null}\r\n\r\n          {type === \"department\" ? (\r\n            <>\r\n              <Form\r\n                onSubmit={(e) => {\r\n                  updateDepartment(e);\r\n                }}\r\n              >\r\n                <Row>\r\n                  <Col md=\"12\">\r\n                    <FormGroup>\r\n                      <label>Name of Department</label>\r\n                      <Input\r\n                        placeholder=\"Eg: Department of Finance\"\r\n                        type=\"text\"\r\n                        style={{ color: \"#aaa\" }}\r\n                        defaultValue={currentDepartment.name}\r\n                        onChange={(e) =>\r\n                          setCurrentDepartment({\r\n                            ...currentDepartment,\r\n                            name: e.target.value,\r\n                          })\r\n                        }\r\n                      />\r\n                    </FormGroup>\r\n                  </Col>\r\n\r\n                  <Col md=\"12\">\r\n                    <FormGroup>\r\n                      <label>Description</label>\r\n                      <Input\r\n                        type=\"textarea\"\r\n                        placeholder=\"Short descrption about department...\"\r\n                        style={{ color: \"#aaa\" }}\r\n                        defaultValue={currentDepartment.description}\r\n                        onChange={(e) =>\r\n                          setCurrentDepartment({\r\n                            ...currentDepartment,\r\n                            description: e.target.value,\r\n                          })\r\n                        }\r\n                      />\r\n                    </FormGroup>\r\n                  </Col>\r\n                </Row>\r\n\r\n                <Button className=\"btn-fill\" color=\"primary\" type=\"submit\">\r\n                  Update Department\r\n                </Button>\r\n              </Form>\r\n            </>\r\n          ) : null}\r\n        </ModalBody>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default DepartmentData;\r\n","C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\views\\admin\\AddTerm.js",[],"C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\views\\admin\\BudgetRequestData.js",[],"C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\views\\ministry\\AddUnit.js",[],"C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\views\\ministry\\ExpenditureData.js",["237","238","239"],"import React, { useState, useEffect } from \"react\";\r\nimport { HiArrowNarrowLeft } from \"react-icons/hi\";\r\nimport { MdDescription } from \"react-icons/md\";\r\nimport { IoLocationSharp } from \"react-icons/io\";\r\nimport axios from \"axios\";\r\nimport { useAuth } from \"contexts/AuthContext\";\r\n// reactstrap components\r\nimport {\r\n  Card,\r\n  CardHeader,\r\n  CardBody,\r\n  CardTitle,\r\n  Table,\r\n  Row,\r\n  Col,\r\n  Button,\r\n} from \"reactstrap\";\r\nimport { Doughnut } from \"react-chartjs-2\";\r\nimport { expenditure } from \"data/api\";\r\nimport Notifications from \"components/Notification/Notification\";\r\n\r\nfunction ExpenditureData({ currentExpenditure, setViewMode }) {\r\n  const [HideExpenditure, setHideExpenditure] = useState(false);\r\n  const [expenditures, setExpenditures] = useState([]);\r\n  const [notificationStatus, setNotificationStatus] = useState(false);\r\n  const [notificationDetails, setNotificationDetails] = useState({});\r\n  const [graphDetails, setGraphDetails] = useState({});\r\n  const { userDetail, activeTerm } = useAuth();\r\n\r\n  function arrangeData() {\r\n    const labels = Object.keys(graphDetails);\r\n    const data = Object.values(graphDetails);\r\n\r\n    return {\r\n      labels: labels,\r\n      datasets: [\r\n        {\r\n          id: 1,\r\n          label: \"Buget : Expenditure\",\r\n          data: data,\r\n          backgroundColor: [\r\n            \"rgba(255, 99, 132)\",\r\n            \"rgba(54, 162, 235)\",\r\n            \"rgba(255, 206, 86)\",\r\n            \"rgba(75, 192, 192)\",\r\n            \"rgba(153, 102, 255)\",\r\n            \"rgba(255, 159, 64)\",\r\n          ],\r\n          borderColor: [\r\n            \"rgba(255, 99, 132, 1)\",\r\n            \"rgba(54, 162, 235, 1)\",\r\n            \"rgba(255, 206, 86, 1)\",\r\n            \"rgba(75, 192, 192, 1)\",\r\n            \"rgba(153, 102, 255, 1)\",\r\n            \"rgba(255, 159, 64, 1)\",\r\n          ],\r\n        },\r\n      ],\r\n    };\r\n  }\r\n\r\n  useEffect(\r\n    () => {\r\n      async function fetchExpenditure() {\r\n        await axios\r\n          .get(\r\n            expenditure.showExpenditureForDepartment +\r\n              \"/\" +\r\n              activeTerm.id +\r\n              \"/\" +\r\n              currentExpenditure.department_id\r\n          )\r\n          .then((response) => {\r\n            if (response.data.status === true) {\r\n              setExpenditures(response.data.data);\r\n              // setDataLoad(false);\r\n            } else {\r\n              setNotificationDetails({\r\n                msg: \"Error Loading Expenditures Please Referesh The Page\",\r\n                type: \"danger\",\r\n              });\r\n              setNotificationStatus(true);\r\n              // setDataLoad(false);\r\n            }\r\n          });\r\n      }\r\n\r\n      async function fetchBudgetExpenditure() {\r\n        await axios\r\n          .get(\r\n            expenditure.showBudgetVsExpenditure +\r\n              \"/\" +\r\n              activeTerm.id +\r\n              \"/\" +\r\n              userDetail.ministryId +\r\n              \"/\" +\r\n              currentExpenditure.department_id\r\n          )\r\n          .then((response) => {\r\n            if (response.data.status === true) {\r\n              setGraphDetails(response.data.data);\r\n              // setDataLoad(false);\r\n            } else {\r\n              setNotificationDetails({\r\n                msg: \"Error Loading Expenditure VS Budget Please Referesh The Page\",\r\n                type: \"danger\",\r\n              });\r\n              setNotificationStatus(true);\r\n              // setDataLoad(false);\r\n            }\r\n          });\r\n      }\r\n      fetchExpenditure();\r\n      fetchBudgetExpenditure();\r\n    },\r\n    // eslint-disable-next-line\r\n    []\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {notificationStatus ? (\r\n        <Notifications details={notificationDetails} />\r\n      ) : null}\r\n      {HideExpenditure ? null : (\r\n        <Col md={12}>\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle className=\"pull-left\" tag=\"h4\">\r\n                Expenditure: {currentExpenditure.department_name}\r\n              </CardTitle>\r\n              <div className=\"pull-right\" style={{ marginBottom: \"20px\" }}>\r\n                <Row>\r\n                  <Button\r\n                    className=\"btn-fill\"\r\n                    onClick={() => setViewMode(\"all\")}\r\n                    style={{ width: \"100%\", marginRight: \"15px\" }}\r\n                    color=\"primary\"\r\n                    type=\"submit\"\r\n                    size=\"sm\"\r\n                  >\r\n                    <HiArrowNarrowLeft size={20} /> Back to Expenditure\r\n                  </Button>\r\n                </Row>\r\n              </div>\r\n            </CardHeader>\r\n          </Card>\r\n        </Col>\r\n      )}\r\n      <Col>\r\n        <Card className=\"grow\">\r\n          {\" \"}\r\n          <CardHeader>Budget : Expenditure Statistics</CardHeader>\r\n          <CardBody>\r\n            <Row>\r\n              <Doughnut\r\n                datasetIdKey=\"id\"\r\n                data={{\r\n                  ...arrangeData(),\r\n                }}\r\n              />\r\n            </Row>\r\n          </CardBody>\r\n        </Card>\r\n      </Col>\r\n\r\n      <Col md={6}>\r\n        <Card>\r\n          <CardHeader>Expenses by Unit</CardHeader>\r\n          <CardBody>\r\n            <Table\r\n              className=\"tablesorter\"\r\n              responsive\r\n              style={{ overflow: \"unset\" }}\r\n            >\r\n              <thead className=\"text-primary\">\r\n                <tr>\r\n                  <th>SN</th>\r\n                  <th>Unit Name</th>\r\n                  <th>Amount (NGN)</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {/* {JSON.stringify(currentBudget)} */}\r\n                {currentExpenditure.units.map((item, key) => {\r\n                  return (\r\n                    <tr>\r\n                      <td>{key + 1}</td>\r\n                      <td>{Object.keys(item)[0]}</td>\r\n                      <td>{Object.values(item)[0].toLocaleString()}</td>\r\n                      {/* <td> {item.amount}</td> */}\r\n\r\n                      <br />\r\n\r\n                      {/* <Col>Unit: {item.Unit.name}</Col>\r\n                        <Col>Amount: {item.amount.toLocaleString()}</Col> */}\r\n                    </tr>\r\n                  );\r\n                })}\r\n              </tbody>\r\n            </Table>\r\n          </CardBody>\r\n        </Card>\r\n      </Col>\r\n      <Col md={12}>\r\n        <Card>\r\n          <CardBody>\r\n            <Table\r\n              className=\"tablesorter\"\r\n              responsive\r\n              style={{ overflow: \"unset\" }}\r\n            >\r\n              <thead className=\"text-primary\">\r\n                <tr>\r\n                  <th>SN</th>\r\n                  <th>Unit Name</th>\r\n                  <th>Description</th>\r\n                  <th>Date Created</th>\r\n                  <th>Amount</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {expenditures.map((item, key) => {\r\n                  return (\r\n                    <tr>\r\n                      <td>{key + 1}</td>\r\n                      <td>{item.Unit.name}</td>\r\n                      <td>\r\n                        {item.description} <br />\r\n                      </td>\r\n                      <td>{new Date(item.date).toLocaleDateString()}</td>\r\n                      <td> {item.amount.toLocaleString()}</td>\r\n\r\n                      <br />\r\n                    </tr>\r\n                  );\r\n                })}\r\n              </tbody>\r\n            </Table>\r\n          </CardBody>\r\n        </Card>\r\n      </Col>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ExpenditureData;\r\n","C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\components\\Notification\\Notification.js",[],"C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\views\\ministry\\AddBudget.js",["240"],"import React, { useState } from \"react\";\r\nimport Notifications from \"components/Notification/Notification\";\r\nimport { unit } from \"../../data/api\";\r\nimport LoadingOverlay from \"react-loading-overlay\";\r\nimport axios from \"axios\";\r\nimport { HiArrowNarrowLeft } from \"react-icons/hi\";\r\n\r\n// reactstrap components\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardHeader,\r\n  CardBody,\r\n  CardTitle,\r\n  FormGroup,\r\n  Form,\r\n  Input,\r\n  Row,\r\n  Col,\r\n  Table,\r\n} from \"reactstrap\";\r\n\r\nfunction AddUnit({ department_id, setIsAdd }) {\r\n  const [unitData, setUnitData] = useState({});\r\n  const [notificationStatus, setNotificationStatus] = useState(false);\r\n  const [notificationDetails, setNotificationDetails] = useState({\r\n    msg: \"\",\r\n    type: \"\",\r\n  });\r\n  const [requestLoading, setRequestLoading] = useState(false);\r\n\r\n  async function addUnit(e) {\r\n    setRequestLoading(true);\r\n    console.log(department_id);\r\n    e.preventDefault();\r\n    await axios\r\n      .post(unit.addUnit + \"/\" + department_id, unitData)\r\n      .then((response) => {\r\n        if (response.data.status) {\r\n          setNotificationDetails({\r\n            msg: \"Units Created Successfully\",\r\n            type: \"success\",\r\n          });\r\n          setUnitData({});\r\n        } else {\r\n          setNotificationDetails({\r\n            msg: \"Error Creating Units...\",\r\n            type: \"success\",\r\n          });\r\n        }\r\n        setNotificationStatus(true);\r\n      })\r\n      .catch((error) => {\r\n        if (error.response) {\r\n          setNotificationDetails({\r\n            msg: error.response.data.msg,\r\n            type: \"danger\",\r\n          });\r\n          setNotificationStatus(true);\r\n        } else {\r\n          setNotificationDetails({ msg: \"Network Error!\", type: \"danger\" });\r\n          setNotificationStatus(true);\r\n        }\r\n      });\r\n    setRequestLoading(false);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {notificationStatus ? (\r\n        <Notifications details={notificationDetails} />\r\n      ) : null}\r\n      <Row>\r\n        <Col md=\"12\">\r\n          <LoadingOverlay\r\n            active={requestLoading}\r\n            spinner\r\n            text=\"Loading your request...\"\r\n          >\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle className=\"pull-left\" tag=\"h4\">\r\n                  Add Unit\r\n                </CardTitle>\r\n                <div className=\"pull-right\" style={{ marginBottom: \"20px\" }}>\r\n                  <Row>\r\n                    <Button\r\n                      className=\"btn-fill\"\r\n                      onClick={() => setIsAdd(false)}\r\n                      style={{ width: \"100%\", marginRight: \"15px\" }}\r\n                      color=\"primary\"\r\n                      size={\"md\"}\r\n                    >\r\n                      <HiArrowNarrowLeft size={20} /> Back to Unit\r\n                    </Button>\r\n                  </Row>\r\n                </div>\r\n              </CardHeader>\r\n              <CardBody>\r\n                <Form\r\n                  onSubmit={(e) => {\r\n                    addUnit(e);\r\n                  }}\r\n                >\r\n                  <Row>\r\n                    <Col md=\"6\" className=\"pr-md-1\">\r\n                      <FormGroup>\r\n                        <label>Name of Unit</label>\r\n                        <Input\r\n                          placeholder=\"Eg: Unit for Chairs\"\r\n                          type=\"text\"\r\n                          onChange={(e) =>\r\n                            setUnitData({ ...unitData, name: e.target.value })\r\n                          }\r\n                        />\r\n                      </FormGroup>\r\n                    </Col>\r\n\r\n                    <Col md=\"6\" className=\"pr-md-1\">\r\n                      <FormGroup>\r\n                        <label>Unit Number</label>\r\n                        <Input\r\n                          placeholder=\"Eg: U101\"\r\n                          type=\"text\"\r\n                          onChange={(e) =>\r\n                            setUnitData({ ...unitData, number: e.target.value })\r\n                          }\r\n                        />\r\n                      </FormGroup>\r\n                    </Col>\r\n\r\n                    <Col md=\"12\">\r\n                      <FormGroup>\r\n                        <label>Description</label>\r\n                        <Input\r\n                          type=\"textarea\"\r\n                          placeholder=\"Short descrption about unit...\"\r\n                          onChange={(e) =>\r\n                            setUnitData({\r\n                              ...unitData,\r\n                              description: e.target.value,\r\n                            })\r\n                          }\r\n                        />\r\n                      </FormGroup>\r\n                    </Col>\r\n                  </Row>\r\n\r\n                  <Button\r\n                    className=\"btn-fill\"\r\n                    color=\"primary\"\r\n                    type=\"submit\"\r\n                    onClick={addUnit}\r\n                  >\r\n                    Add Unit\r\n                  </Button>\r\n                </Form>\r\n              </CardBody>\r\n            </Card>\r\n          </LoadingOverlay>\r\n        </Col>\r\n\r\n        {/* <Col md=\"4\">\r\n\r\n            <Card className=\"card-user\">\r\n              <CardBody>\r\n                <CardText />\r\n                <div className=\"author\">\r\n                  <div className=\"block block-one\" />\r\n                  <div className=\"block block-two\" />\r\n                  <div className=\"block block-three\" />\r\n                  <div className=\"block block-four\" />\r\n                  <a href=\"#pablo\" onClick={(e) => e.preventDefault()}>\r\n                    <img\r\n                      alt=\"...\"\r\n                      className=\"avatar\"\r\n                      src={require(\"assets/img/product.png\").default}\r\n                    />\r\n                    <h5 className=\"title\">Ministry Name: {ministryData.name} </h5>\r\n                    <h5 className=\"title\">Sector: {ministryData.sector} </h5>\r\n                  </a>\r\n                </div>\r\n                <div className=\"card-description\">\r\n                  Description: {ministryData.description}\r\n                </div>\r\n              </CardBody>\r\n            </Card>\r\n\r\n          </Col> */}\r\n      </Row>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default AddUnit;\r\n","C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\views\\ministry\\BudgetData.js",["241"],"import React from \"react\";\r\nimport { HiArrowNarrowLeft } from \"react-icons/hi\";\r\nimport { MdDescription } from \"react-icons/md\";\r\n\r\n// reactstrap components\r\nimport {\r\n  Card,\r\n  CardHeader,\r\n  CardBody,\r\n  CardTitle,\r\n  Table,\r\n  Row,\r\n  Col,\r\n  Button,\r\n} from \"reactstrap\";\r\nimport { Doughnut } from \"react-chartjs-2\";\r\n\r\nfunction BudgetData({ currentBudget, setViewMode }) {\r\n  function arrangeData() {\r\n    const labels = [];\r\n    const data = [];\r\n    currentBudget.map((item) => {\r\n      labels.push(item.Unit.name);\r\n      data.push(item.amount);\r\n    });\r\n\r\n    return {\r\n      labels: labels,\r\n      datasets: [\r\n        {\r\n          id: 1,\r\n          label: \"Unit Distribution\",\r\n          data: data,\r\n          backgroundColor: [\r\n            \"rgba(255, 99, 132)\",\r\n            \"rgba(54, 162, 235)\",\r\n            \"rgba(255, 206, 86)\",\r\n            \"rgba(75, 192, 192)\",\r\n            \"rgba(153, 102, 255)\",\r\n            \"rgba(255, 159, 64)\",\r\n          ],\r\n          borderColor: [\r\n            \"rgba(255, 99, 132, 1)\",\r\n            \"rgba(54, 162, 235, 1)\",\r\n            \"rgba(255, 206, 86, 1)\",\r\n            \"rgba(75, 192, 192, 1)\",\r\n            \"rgba(153, 102, 255, 1)\",\r\n            \"rgba(255, 159, 64, 1)\",\r\n          ],\r\n        },\r\n      ],\r\n    };\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Col md={12}>\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"pull-left\" tag=\"h4\">\r\n              {currentBudget[0].data.department_name +\r\n                \": \" +\r\n                currentBudget[0].data.sector}\r\n            </CardTitle>\r\n            <div className=\"pull-right\" style={{ marginBottom: \"20px\" }}>\r\n              <Row>\r\n                <Button\r\n                  className=\"btn-fill\"\r\n                  onClick={() => setViewMode(\"all\")}\r\n                  style={{ width: \"100%\", marginRight: \"15px\" }}\r\n                  color=\"primary\"\r\n                  type=\"submit\"\r\n                  size=\"sm\"\r\n                >\r\n                  <HiArrowNarrowLeft size={20} /> Back to Budgets\r\n                </Button>\r\n              </Row>\r\n            </div>\r\n          </CardHeader>\r\n          <Col>\r\n            <Row>\r\n              <Col>\r\n                <h5>\r\n                  <MdDescription size={20} />\r\n                  Purpose: {currentBudget[0].Department.description}\r\n                </h5>\r\n              </Col>\r\n            </Row>\r\n          </Col>\r\n        </Card>\r\n      </Col>\r\n\r\n      <Col md={6}>\r\n        <Card>\r\n          <CardBody>\r\n            <h5>Budget Unit Distribution</h5>\r\n            <Doughnut\r\n              datasetIdKey=\"id\"\r\n              data={{\r\n                ...arrangeData(currentBudget),\r\n              }}\r\n            />\r\n            {/* <Doughnut /> */}\r\n          </CardBody>\r\n        </Card>\r\n      </Col>\r\n      <Col md={6}>\r\n        <Card>\r\n          <CardHeader>Budget by Unit</CardHeader>\r\n          <CardBody>\r\n            <Table\r\n              className=\"tablesorter\"\r\n              responsive\r\n              style={{ overflow: \"unset\" }}\r\n            >\r\n              <thead className=\"text-primary\">\r\n                <tr>\r\n                  <th>SN</th>\r\n                  <th>Unit Name</th>\r\n                  <th>Unit Number</th>\r\n                  <th>Amount</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {/* {JSON.stringify(currentBudget)} */}\r\n                {currentBudget.map((item, key) => {\r\n                  return (\r\n                    <tr>\r\n                      <td>{key + 1}</td>\r\n                      <td>{item.Unit.name}</td>\r\n                      <td>{item.Unit.number}</td>\r\n                      <td> {item.amount}</td>\r\n\r\n                      <br />\r\n\r\n                      {/* <Col>Unit: {item.Unit.name}</Col>\r\n                        <Col>Amount: {item.amount.toLocaleString()}</Col> */}\r\n                    </tr>\r\n                  );\r\n                })}\r\n              </tbody>\r\n            </Table>\r\n          </CardBody>\r\n        </Card>\r\n      </Col>\r\n      <Col md={12}>\r\n        <Card>\r\n          <CardBody>\r\n            <Table\r\n              className=\"tablesorter\"\r\n              responsive\r\n              style={{ overflow: \"unset\" }}\r\n            >\r\n              <thead className=\"text-primary\">\r\n                <tr>\r\n                  <th>SN</th>\r\n                  <th>Unit Name</th>\r\n                  <th>Unit Description</th>\r\n                  <th>Amount</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {/* {JSON.stringify(currentBudget)} */}\r\n                {currentBudget.map((item, key) => {\r\n                  return (\r\n                    <tr>\r\n                      <td>{key + 1}</td>\r\n                      <td>\r\n                        {item.Unit.name}\r\n                        <br />\r\n                        {item.Unit.number}\r\n                      </td>\r\n                      <td>\r\n                        Description: {item.Unit.description} <br />\r\n                        Notes: {item.data.notes} <br />\r\n                      </td>\r\n                      <td> {item.amount.toLocaleString()}</td>\r\n\r\n                      <br />\r\n\r\n                      {/* <Col>Unit: {item.Unit.name}</Col>\r\n                        <Col>Amount: {item.amount.toLocaleString()}</Col> */}\r\n                    </tr>\r\n                  );\r\n                })}\r\n              </tbody>\r\n            </Table>\r\n          </CardBody>\r\n        </Card>\r\n      </Col>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default BudgetData;\r\n","C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\views\\ministry\\Unit.js",[],"C:\\Users\\finix\\Documents\\GitHub\\budget-system\\client\\src\\views\\ministry\\UnitReport.js",[],{"ruleId":"242","replacedBy":"243"},{"ruleId":"244","replacedBy":"245"},{"ruleId":"246","severity":1,"message":"247","line":3,"column":22,"nodeType":"248","messageId":"249","endLine":3,"endColumn":26},{"ruleId":"246","severity":1,"message":"250","line":6,"column":22,"nodeType":"248","messageId":"249","endLine":6,"endColumn":29},{"ruleId":"246","severity":1,"message":"251","line":23,"column":36,"nodeType":"248","messageId":"249","endLine":23,"endColumn":46},{"ruleId":"246","severity":1,"message":"252","line":21,"column":10,"nodeType":"248","messageId":"249","endLine":21,"endColumn":29},{"ruleId":"246","severity":1,"message":"253","line":24,"column":16,"nodeType":"248","messageId":"249","endLine":24,"endColumn":23},{"ruleId":"246","severity":1,"message":"254","line":3,"column":23,"nodeType":"248","messageId":"249","endLine":3,"endColumn":33},{"ruleId":"246","severity":1,"message":"253","line":22,"column":16,"nodeType":"248","messageId":"249","endLine":22,"endColumn":23},{"ruleId":"255","severity":1,"message":"256","line":462,"column":45,"nodeType":"257","messageId":"258","endLine":462,"endColumn":47},{"ruleId":"246","severity":1,"message":"259","line":36,"column":22,"nodeType":"248","messageId":"249","endLine":36,"endColumn":35},{"ruleId":"246","severity":1,"message":"260","line":6,"column":23,"nodeType":"248","messageId":"249","endLine":6,"endColumn":29},{"ruleId":"246","severity":1,"message":"261","line":42,"column":10,"nodeType":"248","messageId":"249","endLine":42,"endColumn":15},{"ruleId":"246","severity":1,"message":"262","line":7,"column":10,"nodeType":"248","messageId":"249","endLine":7,"endColumn":23},{"ruleId":"246","severity":1,"message":"263","line":67,"column":18,"nodeType":"248","messageId":"249","endLine":67,"endColumn":28},{"ruleId":"264","severity":1,"message":"265","line":76,"column":13,"nodeType":"266","endLine":114,"endColumn":4},{"ruleId":"264","severity":1,"message":"267","line":114,"column":6,"nodeType":"268","endLine":114,"endColumn":8,"suggestions":"269"},{"ruleId":"264","severity":1,"message":"265","line":116,"column":13,"nodeType":"266","endLine":160,"endColumn":4},{"ruleId":"270","severity":1,"message":"271","line":368,"column":53,"nodeType":"257","messageId":"272","endLine":368,"endColumn":58},{"ruleId":"273","severity":1,"message":"274","line":55,"column":21,"nodeType":"266","messageId":"275","endLine":55,"endColumn":23},{"ruleId":"264","severity":1,"message":"276","line":187,"column":6,"nodeType":"268","endLine":187,"endColumn":8,"suggestions":"277"},{"ruleId":"246","severity":1,"message":"278","line":3,"column":10,"nodeType":"248","messageId":"249","endLine":3,"endColumn":23},{"ruleId":"246","severity":1,"message":"279","line":4,"column":10,"nodeType":"248","messageId":"249","endLine":4,"endColumn":25},{"ruleId":"246","severity":1,"message":"280","line":23,"column":27,"nodeType":"248","messageId":"249","endLine":23,"endColumn":45},{"ruleId":"246","severity":1,"message":"281","line":20,"column":3,"nodeType":"248","messageId":"249","endLine":20,"endColumn":8},{"ruleId":"273","severity":1,"message":"274","line":22,"column":30,"nodeType":"266","messageId":"275","endLine":22,"endColumn":32},"no-native-reassign",["282"],"no-negated-in-lhs",["283"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'BiReset' is defined but never used.","'activeTerm' is assigned a value but never used.","'totalAccountedUnits' is assigned a value but never used.","'setTime' is assigned a value but never used.","'department' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'setMinistryId' is assigned a value but never used.","'FiGrid' is defined but never used.","'isAdd' is assigned a value but never used.","'IoMdAddCircle' is defined but never used.","'updateUnit' is defined but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has a missing dependency: 'userDetail.type'. Either include it or remove the dependency array.","ArrayExpression",["284"],"no-self-compare","Comparing to itself is potentially pointless.","comparingToSelf","array-callback-return","Array.prototype.map() expects a return value from arrow function.","expectedInside","React Hook useEffect has missing dependencies: 'activeTerm.id' and 'currentDepartment.id'. Either include them or remove the dependency array.",["285"],"'MdDescription' is defined but never used.","'IoLocationSharp' is defined but never used.","'setHideExpenditure' is assigned a value but never used.","'Table' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"286","fix":"287"},{"desc":"288","fix":"289"},"Update the dependencies array to be: [userDetail.type]",{"range":"290","text":"291"},"Update the dependencies array to be: [activeTerm.id, currentDepartment.id]",{"range":"292","text":"293"},[3254,3256],"[userDetail.type]",[5345,5347],"[activeTerm.id, currentDepartment.id]"]